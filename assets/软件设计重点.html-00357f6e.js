import{_ as i,W as l,X as a,a2 as e}from"./framework-61af4b36.js";const p="/assets/images/image-20230223164149648.png",d="/assets/images/9722514a25e0530b47d6caf37fc275f5.jpeg",h="/assets/images/047fdd5d2c100d10df850401096d33c3.jpeg",r={},u=e('<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> &quot;&quot;</h1><h2 id="第一章" tabindex="-1"><a class="header-anchor" href="#第一章" aria-hidden="true">#</a> 第一章</h2><p>1.[填空题] 软件工程层次图：</p><ul><li>工具</li><li>方法</li><li>过程</li><li>质量关注点</li></ul><p>2.从分析模型到设计模型的转化，分析模型都有：</p><ul><li>基于场景的元素</li><li>面向流的元素</li><li>基于类的元素</li><li>行为元素</li></ul><p>3.质量指导原则：</p><ul><li>设计应使用具备良好设计特征的构件组成</li><li>设计应模块化</li><li>设计应包含数据，接口，构件，体系结构的明确表示</li><li>设计应导出数据结构</li><li>设计应导出独立的构件</li><li>设计应导出接口</li><li>设计应导出获取的信息</li><li>设计应使用能有效传达其意义的表示法来表达</li></ul><p>4.FURPS指的是：</p><ul><li>功能性(F)、易用性(U)、可靠性(R)、性能(P)、可支持性(S)</li></ul><p>5.组织良好的设计类有四个特征：</p><ul><li>完整和充分性</li><li>原始性</li><li>高内聚，低耦合</li></ul><p>6.软件体系结构分四个研究领域：</p><ul><li>提供新的体系结构描述语言解决体系结构问题</li><li>知识的总结性研究</li><li>针对特定框架的研究</li><li>形式化支持的研究</li></ul><p>7.设计模式和应用框架的区别：</p><ul><li>设计模式是软件高效、成熟的设计模板，包含问题的解决方案</li><li>应用框架是整个或部分系统的可重用设计，一组抽象构件的集合和构件实例之间的交互</li></ul><h2 id="第二章" tabindex="-1"><a class="header-anchor" href="#第二章" aria-hidden="true">#</a> 第二章</h2><p>1.软件模型的发展轨迹：</p><ul><li>功能模型--对象模型--组件模型--配置型组件模型--服务模型--抽象模型</li></ul><p>2.非形式化描述具有以下缺陷</p><ul><li>语义模糊</li><li>由语义模糊引起的沟通障碍</li><li>无法实现系统验证</li><li>不适于描述体系结构行为</li></ul><p>3.形式化描述有以下特点：</p><ul><li>可以用于系统描述</li><li>比体系结构行为描述更胜一筹</li></ul><p>4.软件体系结构设计的基本任务是：</p><ul><li>识别构成系统的子系统，并建立子系统控制和通信的基本框架，以满足系统的功能性和非功能性需求</li></ul><p>5.体系结构描述语言ADL的非正式定义是：</p><ul><li>描述软件与系统结构的计算机语言</li></ul><p>6.ADL的基本元素：</p><ul><li>构件</li><li>连接器</li><li>配置</li></ul><h2 id="第三章" tabindex="-1"><a class="header-anchor" href="#第三章" aria-hidden="true">#</a> 第三章</h2><p>1.软件体系结构的模型分为五种：</p><ul><li>结构模型</li><li>框架模型</li><li>动态模型</li><li>过程模型</li><li>功能模型</li><li>常用的是，结构模型和动态模型</li></ul><p>2.UML(统一建模语言)的特点：</p><ul><li>统一标准</li><li>面向对象的特性</li><li>立于过程</li><li>可以清晰的表示系统的模型</li></ul><p>3.UML的14重图术语之中的三个（P72）：</p><ul><li>活动图</li><li>序列图</li><li>时序图</li></ul><p>4.[填空] 对象是现实世界中的个体或事物的抽象</p><ul><li>是其<code>属性</code>和<code>相关操作</code>的封装</li></ul><p>5.面向对象的优势：</p><ul><li>支持软件的重用性</li><li>提高软件的可维护性和安全性</li></ul><p>6.P84之后的时序图，状态图</p><p>7.UML工具：</p><ul><li>Rational Rose</li><li>IBM Rational RSA</li><li>Enterprise Architect</li><li>StarUML</li><li>Trufun Kant Studio</li></ul><h2 id="第四章" tabindex="-1"><a class="header-anchor" href="#第四章" aria-hidden="true">#</a> 第四章</h2><p>1.软件体系结构设计中，需要注意以下规则：</p><ul><li>改进软件架构，提高模块独立性</li><li>模块规模应该适中</li><li>深度、宽度等应该适当</li><li>力争降低模块接口的复杂度</li><li>设计单入单出的模块</li></ul><p>2.P94的图4-4和左侧解释</p><p>3.DSSA(特定领域的软件体系结构)与体系结构风格的区别：</p><ul><li>从不同的角度研究问题，前者从问题域出发，后者从解决域出发</li><li>DSSA只在某个特定领域提取，总结，组织</li><li>DSSA的工具只适用于一个较小的范围，其他领域难以复用</li></ul><p>4.软件产品线的主要组成部分：</p><ul><li>核心资源 和 软件产品集合</li></ul><p>5.软件可信性质有：</p><ul><li>可靠性</li><li>可靠安全性</li><li>保密安全性</li><li>生存性</li><li>容错性</li><li>实时性</li></ul><p>6.软件容错设计方法：</p><ul><li>恢复块</li><li>N-版本编程</li></ul><p>7.设计评审的原则：</p><ul><li>对产品评审，不是对开发人员</li><li>针对性</li><li>阐明问题所在</li><li>事先准备</li><li>确定软件是否遵循规格说明书</li><li>坚持记录</li></ul><h2 id="第五章" tabindex="-1"><a class="header-anchor" href="#第五章" aria-hidden="true">#</a> 第五章</h2><p>1.软件体系结构设计的核心问题：</p><ul><li>能否使用重复的体系结构模式</li></ul><p>2.基本风格解析：</p><ul><li>管道-过滤器</li><li>分层系统风格</li><li>仓库风格和黑板风格</li></ul><p>3.C/S体系结构的三个组成部分：</p><ul><li>数据库服务器</li><li>客户应用程序</li><li>网络</li></ul><p>4.C/S体系结构的缺点：</p><ul><li>开发成本高</li><li>客户端程序设计复杂</li><li>信息内容单一</li><li>用户界面风格不一</li><li>软件移植困难</li><li>软件维护困难</li><li>新技术不能轻易应用</li></ul><p>5.三层C/S体系结构将应用功能分成</p><ul><li>表示层</li><li>功能层</li><li>数据层</li></ul><p>6.三层C/S有以下优点：</p><ul><li>允许合理划分三层结构的功能</li><li>允许更灵活的选择相应的平台</li><li>各层可以并行开发</li><li>允许充分利用功能层有效地隔离开表示层和数据层</li></ul><p>7.B/S体系结构优点：</p><ul><li>简化客户端</li><li>适用于网上信息的发布</li><li>通过互联网技术统一访问不同种类的数据库</li></ul><p>8.正交软件体系结构由</p><ul><li>组织层 和 线索的构件 构成</li></ul><p>9.正交软件体系结构具有以下优点：</p><ul><li>结构清晰，易于理解</li><li>易修改，可维护性强</li><li>可移植性强</li></ul><h2 id="第六章" tabindex="-1"><a class="header-anchor" href="#第六章" aria-hidden="true">#</a> 第六章</h2><p>1.面向对象的思想软件开发的各个阶段：</p><ul><li>面向对象的分析</li><li>面向对象的设计</li><li>面向对象的编程实现</li></ul><p>2.AOP把系统关注点分为：</p><ul><li>核心关注点</li><li>横切关注点</li></ul><h2 id="第七章" tabindex="-1"><a class="header-anchor" href="#第七章" aria-hidden="true">#</a> 第七章</h2><p>1.P167 看PPT</p><p>2.P177，有个案例</p><h2 id="第九章" tabindex="-1"><a class="header-anchor" href="#第九章" aria-hidden="true">#</a> 第九章</h2><p>1.设计模式的核心思想：</p><ul><li>通过累计前人的经验，使得在面对新问题时，可以套用已有的模式，提高编程的效率</li></ul><p>2.设计模式的作用和研究意义：</p><ul><li>优化的设计经验</li><li>较高的复用性</li><li>丰富的表达能力</li><li>降低耦合性</li></ul><h2 id="第十章" tabindex="-1"><a class="header-anchor" href="#第十章" aria-hidden="true">#</a> 第十章</h2><p>1.使用Web服务的好处：</p><ul><li>平台的无关性</li><li>通用的通信信道</li><li>企业的互操作性</li><li>功能复用</li><li>拓展业务</li><li>服务器的中立性</li><li>安全的通信</li></ul><h2 id="第十一章" tabindex="-1"><a class="header-anchor" href="#第十一章" aria-hidden="true">#</a> 第十一章</h2><p>1.EJB构建模型的特点：</p><ul><li><p>EJB将成为用Java开发分布式的，面向对象的企业级应用系统的标准构件体系结构</p></li><li><p>使得应用系统开发变得容易</p></li><li><p>一次编写，到处运行</p></li><li><p>拥有统一的协议</p></li><li><p>EJB与已有的服务器平台等兼容</p></li></ul><p>2.EJB开发应用系统的优点：</p><ul><li>标准的Java技术，可以在不同的服务器上运行</li><li>修改应用系统很容易</li><li>应用系统经过划分后，使得构件之间相互独立</li><li>开发变得容易</li><li>在新的应用系统中复用，减少开发时间</li></ul><p>3.DCOM(微软的概念和程序接口)的特点：</p><ul><li>组件和复用</li><li>位置独立性</li><li>语言无关性</li><li>连接管理</li><li>可扩展性</li><li>对称的多进程处理</li></ul><h2 id="第十二章" tabindex="-1"><a class="header-anchor" href="#第十二章" aria-hidden="true">#</a> 第十二章</h2><p>1.质量属性：</p><ul><li>质量属性是一个组件或一个系统的非功能性特征</li></ul><p>2.质量属性特征：</p><ul><li>功能性</li><li>可靠性</li><li>可用性</li><li>有效性</li><li>可维护性</li><li>可移植性</li></ul><p>3.P293 图12-1的步骤</p><p>4.基于场景的评估方法的不足之处：</p><ul><li>评估对评估师经验要求高</li><li>重量级的评估技术成本比较高</li><li>没有考虑只是的积累问题，造成资源浪费</li><li>缺乏实用的评估管理工具</li></ul><p>5.SAAM的一般步骤：P295</p><p>6.ATAM要求三个小组参与合作：</p><ul><li>评估小组</li><li>项目决策者</li><li>涉众</li></ul><p>7.整个ATAM评估过程包括九个步骤：P300</p><h2 id="第十三章" tabindex="-1"><a class="header-anchor" href="#第十三章" aria-hidden="true">#</a> 第十三章</h2><p>1.软件再工程的过程模型：</p><ul><li>正向工程</li><li>库存目录分析</li><li>文档重构</li><li>逆向工程</li><li>代码重构</li><li>数据忠狗</li></ul><h2 id="第十四章" tabindex="-1"><a class="header-anchor" href="#第十四章" aria-hidden="true">#</a> 第十四章</h2><p>1.根据云计算服务的部署方式和服务对象范围，可以将云分为：</p><ul><li>公共云</li><li>私有云</li><li>混合云</li></ul><p>2.根据云计算的服务类型，可以分为三层：</p><ul><li>将基础设施作为服务</li><li>将平台作为服务</li><li>将软件作为服务</li></ul><h2 id="简答题" tabindex="-1"><a class="header-anchor" href="#简答题" aria-hidden="true">#</a> 简答题</h2><h3 id="_1-敏捷建模原则" tabindex="-1"><a class="header-anchor" href="#_1-敏捷建模原则" aria-hidden="true">#</a> 1.敏捷建模原则</h3><ul><li>最优先要做的是尽早、持续地交付有价值的软件，让客户满意。</li><li>欣然面对需求变化，即使在开发后期。敏捷过程利用变化为客户维持竞争的优势。</li><li>频繁地交付可工作的软件，从数周到数月，交付周期越短越好。</li><li>在团队内外，面对面交谈是最有效，也是最高效的沟通方式。</li><li>在整个项目过程中，业务人员必须和开发人员每天都在一起工作。</li><li>以受激励的个体为核心构建项目。为他们提供所需的环境和支持，相信他们可以把工作做好。</li><li>可工作的软件是衡量进度的首要标准。</li><li>敏捷过程倡导可持续开发。</li><li>坚持不懈的追求技术卓越和良好的设计，以此增强敏捷的能力。</li><li>简单是尽最大可能减少不必要工作的艺术，是敏捷的根本。</li><li>最好的架构、需求和设计来自自组织的团队。</li><li>团队定期反思如何提升效率，并依此调整自己的行为。</li></ul><h3 id="_2-体系结构设计的四个步骤" tabindex="-1"><a class="header-anchor" href="#_2-体系结构设计的四个步骤" aria-hidden="true">#</a> 2.体系结构设计的四个步骤；</h3><ol><li>系统必须表示在相应的环境中。</li><li>环境确定后，设计人员应该确定一系列的顶层抽象，称作原型。</li><li>完成抽象后，设计开始向现实移动，在支持构件的体系结构环境中识别和描述这些构件</li><li>开发体系结构的特定实例，在真实世界中验证设计。</li></ol><h3 id="_3-软件体系结构风格的分层系统风格的概念和优缺点" tabindex="-1"><a class="header-anchor" href="#_3-软件体系结构风格的分层系统风格的概念和优缺点" aria-hidden="true">#</a> 3.软件体系结构风格的分层系统风格的概念和优缺点；</h3><p>概念特点：</p><ul><li>分层风格可以按照层次结构来组织不同类别的相关服务的应用程序。分层风格的系统按照层次结构组织，每一层向它的上一层提供服务，同时又是它的下层客户。</li></ul><p>优点：</p><ul><li>因为层次的邻接层数目进行了限制，所以，系统易于改进和扩展</li><li>每一层的软件都易于重用，并为某一层次提供多种可交换的具体实现</li><li>设计者可以将系统分解为一个增量的步骤序列从而完成复杂的业务逻辑。</li><li>标准化支持</li><li>可替换性</li><li>局部依赖性。</li></ul><p>缺点：</p><ul><li>应当如何界定层次间的划分，是一个较为复杂的问题</li><li>更改行为的重叠</li><li>降低效率</li><li>不必要的工作</li><li>难以认可层的正确粒度</li></ul><h3 id="_4-saam的一般步骤" tabindex="-1"><a class="header-anchor" href="#_4-saam的一般步骤" aria-hidden="true">#</a> 4.SAAM的一般步骤：</h3><ol><li>场景的形成</li><li>描述软件体系结构</li><li>场景的分类和优先级划分</li><li>间接场景的单独评估</li><li>评估场景交互</li><li>形成总体评估</li></ol><h2 id="画图" tabindex="-1"><a class="header-anchor" href="#画图" aria-hidden="true">#</a> 画图</h2><h3 id="_1-时序图" tabindex="-1"><a class="header-anchor" href="#_1-时序图" aria-hidden="true">#</a> 1.时序图：</h3><p><strong>顺序图也称为时序图</strong>，它描述了系统中，对象间通过消息进行的交互，它强调了消息在时间轴上的先后顺序。</p><p>例题：</p><p>某个网上银行的用户登录过程如下：用户先填写用户名和口令，要求登录。如果用户名和密码正确，则要求输入一个验证码。此时该用户的手机上将接收一个短信，包含一个验证码，用户再将此码填入下一个页面，再提交服务器。如果验证码正确，则能正常登录。验证码一次有效。用时序图描述这个过程。</p><figure><img src="'+p+'" alt="image-20230223164149648" tabindex="0" loading="lazy"><figcaption>image-20230223164149648</figcaption></figure><h3 id="_2-数据流图-p166" tabindex="-1"><a class="header-anchor" href="#_2-数据流图-p166" aria-hidden="true">#</a> 2.数据流图 P166</h3><p>例题：</p><p>某高校学生选课系统有如下功能：学生根据开课情况和培养方案填写选课单，选课系统对每个学生的选课单进行处理。选课系统根据教学计划检查学生学分情况，计算上课时间如果不发生冲突，或冲突时间小于20%，则可以选修。根据选课优先级，最后产生每个学生的个人课表和每门课程的选课名单。请分层画出该系统的顶层和1层的数据流图。</p><p>选课系统顶层数据流图</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>选课系统1层数据流程</p><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-数据字典-p173" tabindex="-1"><a class="header-anchor" href="#_3-数据字典-p173" aria-hidden="true">#</a> 3.数据字典 P173</h3><p>数据词典与数据流图配合，能清楚地表达数据处理的要求</p><p>例题：</p><p>影碟租借与销售系统</p><figure><img src="https://pic1.zhimg.com/80/v2-1907c2256172e89fc186191c570955f8_720w.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_4-实体-联系图-er-图" tabindex="-1"><a class="header-anchor" href="#_4-实体-联系图-er-图" aria-hidden="true">#</a> 4.实体-联系图(ER)图</h3><p>在ER图中有如下四个成分：</p><p>矩形框：表示实体，在框中记入实体名。</p><p>菱形框：表示联系，动作，在框中记入联系名。</p><p>椭圆形框：表示实体或联系的属性，将属性名记入框中。对于主属性名，则在其名称下划一下划线。</p><p>例题：</p><figure><img src="https://pic1.zhimg.com/v2-aa5b23c846a00489f578c83a32394a88_r.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="填空题" tabindex="-1"><a class="header-anchor" href="#填空题" aria-hidden="true">#</a> 填空题</h2><h3 id="_1-用uml进行设计要什么设计模型" tabindex="-1"><a class="header-anchor" href="#_1-用uml进行设计要什么设计模型" aria-hidden="true">#</a> 1.用UML进行设计要什么设计模型</h3><ul><li>需要 <code>静态</code>、<code>动态</code> 模型</li></ul><h3 id="_2-面向对象的设计过程包括什么" tabindex="-1"><a class="header-anchor" href="#_2-面向对象的设计过程包括什么" aria-hidden="true">#</a> 2.面向对象的设计过程包括什么：</h3><p>面向对象的分析、面向对象的设计、面向对象的编程实现</p><ul><li>简：分析、设计、实现</li></ul><h3 id="_3-黑板模型由那三部分组成" tabindex="-1"><a class="header-anchor" href="#_3-黑板模型由那三部分组成" aria-hidden="true">#</a> 3.黑板模型由那三部分组成</h3><ul><li><code>知识源</code>：包含独立的、与应用程序相关的知识，知识源之间不直接进行通讯，它们之间的交互只通过黑板来完成。</li><li><code>黑板数据结构</code>：按照与应用程序相关的层次来组织并解决问题的数据，知识源，通过不断地改变黑板数据来解决问题。</li><li><code>控制单元</code>：完全由黑板的状态驱动，黑板状态的改变决定了需要使用的特定知识。</li></ul><h3 id="_4-adl-体系结构描述语言-的基本要素" tabindex="-1"><a class="header-anchor" href="#_4-adl-体系结构描述语言-的基本要素" aria-hidden="true">#</a> 4.ADL(体系结构描述语言)的基本要素</h3><ul><li>构件</li><li>连接器</li><li>配置</li></ul><h3 id="_5-基于类的分析模型元素包括什么" tabindex="-1"><a class="header-anchor" href="#_5-基于类的分析模型元素包括什么" aria-hidden="true">#</a> 5.基于类的分析模型元素包括什么：</h3><p>类和对象、属性、操作、类的职责协作者模型、协作图和包。</p>',170),n=[u];function t(c,s){return l(),a("div",null,n)}const f=i(r,[["render",t],["__file","软件设计重点.html.vue"]]);export{f as default};
