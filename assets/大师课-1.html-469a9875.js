import{_ as n,W as a,X as s,a2 as t}from"./framework-61af4b36.js";const e="/assets/master/image-20230308160540237.png",p="/assets/master/image-20230308200839815.png",i="/assets/master/image-20230308202643382.png",o="/assets/master/image-20230308202753877.png",c={},l=t('<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> &quot;&quot;</h1><h1 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h1><h2 id="浏览器的进程模型" tabindex="-1"><a class="header-anchor" href="#浏览器的进程模型" aria-hidden="true">#</a> 浏览器的进程模型</h2><p>事件循环和浏览器密切相关</p><h3 id="何为进程" tabindex="-1"><a class="header-anchor" href="#何为进程" aria-hidden="true">#</a> 何为进程？</h3><p>程序运行需要有它的自己专属的内存空间，可以把这块内存空间理解为进程。</p><p>每个应用至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意。</p><h3 id="何为线程" tabindex="-1"><a class="header-anchor" href="#何为线程" aria-hidden="true">#</a> 何为线程？</h3><p>有了进程之后，就可以运行程序的代码了。</p><p>运行代码的<code>人</code>称之为<code>线程</code></p><p>一个进程至少有一个线程，所以在进程开启后会自动创建一个<code>线程</code>来运行代码，该线程称之为<code>主线程</code></p><p>如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。</p><h3 id="浏览器有哪些进程和线程" tabindex="-1"><a class="header-anchor" href="#浏览器有哪些进程和线程" aria-hidden="true">#</a> 浏览器有哪些进程和线程？</h3><p>浏览器是一个多进程多线程的应用程序</p><p>浏览器内部工作极其复杂</p><p>为了避免相互影响，为了减少连环崩溃的几率，当启动浏览器后，它会自动启动多个线程。</p><figure><img src="'+e+'" alt="image-20230308160540237" tabindex="0" loading="lazy"><figcaption>image-20230308160540237</figcaption></figure><blockquote><p>可以在浏览器的任务管理器中查看当前所有进程</p></blockquote><p>其中，主要的进程有：</p><ol><li><p>浏览器进程 主要负责界面显示、用户交互、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</p></li><li><p>网络进程 负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。</p></li><li><p>渲染进程(重要) 渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML、CSS、JS 代码。</p><p>默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不互相影响。</p><blockquote><p>将来该模式可能会发生改变，可能会以一个站点一个进程，而不是一个标签页一个进程。</p></blockquote></li></ol><h2 id="渲染主线程是如何工作的" tabindex="-1"><a class="header-anchor" href="#渲染主线程是如何工作的" aria-hidden="true">#</a> 渲染主线程是如何工作的？</h2><p>渲染主线程是浏览器中最繁忙的线程，需要处理的任务包括但不限于：</p><ul><li>解析HTML</li><li>解析CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒把页面画60次</li><li>执行全局JS代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>……</li></ul><blockquote><p>思考题：为什么渲染进程不适用多个线程来处理这些事情</p></blockquote><p>要处理怎么多的任务，主线程遇到了一个前所未有的难题，如何调度任务？</p><p>如：</p><ul><li>正在执行一个JS函数，执行到一半的时候用户点击了按钮，应该立即去执行点击事件的处理函数吗？</li><li>正在执行一个JS函数，执行到一半的时候某个计时器到达了时间，我该立即去执行它的回调吗</li><li>浏览器进程触发用户点击事件，同时计时器也到达了时间，应该先处理哪一个等等。</li></ul><p>渲染主线程想到了一个绝妙的主意来处理问题：<code>排队</code></p><figure><img src="'+p+'" alt="image-20230308200839815" tabindex="0" loading="lazy"><figcaption>image-20230308200839815</figcaption></figure><ol><li>在最开始的时候，渲染主线程会进入一个无限循环</li><li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一个循环；如果没有，则进入休眠状态。</li><li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿去任务。</li></ol><p><strong>整个过程被称为：事件循环(消息循环)</strong></p><h1 id="何为异步" tabindex="-1"><a class="header-anchor" href="#何为异步" aria-hidden="true">#</a> 何为异步？</h1><p>代码在执行的过程中，会遇到一些无法立即执行的任务，如：</p><ul><li>计时完成后需要执行的任务 <code>setTimeout</code></li><li>网络通信完成后需要执行的任务 <code>XHR、Fetch</code></li><li>用户操作后需要执行的任务：<code>addEventListener</code></li></ul><p>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于<code>阻塞</code>状态。从而导致浏览器卡死</p><figure><img src="'+i+'" alt="image-20230308202643382" tabindex="0" loading="lazy"><figcaption>image-20230308202643382</figcaption></figure><p><strong>渲染主线程承担着及其重要的工作，无论如何都不能阻塞</strong></p><p>所以浏览器选择异步来解决问题。</p><figure><img src="'+o+`" alt="image-20230308202753877" tabindex="0" loading="lazy"><figcaption>image-20230308202753877</figcaption></figure><p>使用异步的方式，渲染主线程永不阻塞。</p><blockquote><p>面试题：如何理解 JS 的异步？</p><p>参考答案：</p><p>JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。</p><p>而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中执行。</p><p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死的现象。</p><p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数<code>包装成任务</code>，加入到消息队列的末尾排队，等待主线程调度执行。</p><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p></blockquote><h1 id="js为何会阻碍渲染" tabindex="-1"><a class="header-anchor" href="#js为何会阻碍渲染" aria-hidden="true">#</a> JS为何会阻碍渲染？</h1><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> h1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 死循环</span>
    <span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token parameter">durations</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> durations<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        h1<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&quot;EricKiku&quot;</span><span class="token punctuation">;</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码作用是点击按钮修改h1的内容，但是点击按钮之后，页面卡死3s之后，内容才发生改变，原因是：</p><p>渲染主线程运行到事件函数时，会把事件监听交给其他线程，主线程进入休眠状态。</p><p>当按钮被点击时，监听事件的线程会将回调函数包装成一个任务对象，加入到消息队列末尾，等待主线程调度执行。</p><p>主线程发现消息队列有任务存在，开始调度任务。发现有一个<code>修改页面的渲染任务</code>，会将该渲染任务添加到消息队列中，然后开始死循环，等函数执行完毕，再从消息队列中拿取渲染任务，页面才发生改变。</p><h1 id="任务有优先级吗" tabindex="-1"><a class="header-anchor" href="#任务有优先级吗" aria-hidden="true">#</a> 任务有优先级吗？</h1>`,48),u=[l];function r(d,k){return a(),s("div",null,u)}const g=n(c,[["render",r],["__file","大师课-1.html.vue"]]);export{g as default};
