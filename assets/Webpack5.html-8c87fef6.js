import{_ as t,W as l,X as i,Y as n,Z as s,$ as p,a2 as a,G as o}from"./framework-61af4b36.js";const c={},r=a('<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> &quot;&quot;</h1><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><h2 id="webpack5" tabindex="-1"><a class="header-anchor" href="#webpack5" aria-hidden="true">#</a> Webpack5</h2>',3),d={href:"https://www.webpackjs.com/guides/getting-started/",target:"_blank",rel:"noopener noreferrer"},u=a(`<h2 id="为什么需要打包" tabindex="-1"><a class="header-anchor" href="#为什么需要打包" aria-hidden="true">#</a> 为什么需要打包</h2><p>开发时，会使用框架、ES6模块化语法，Less等预处理器进行开发。</p><p>这样的代码必须经过编译才能在浏览器运行，需要编译成浏览器识别的js、css语法。</p><p>打包工具可以<code>压缩代码、做兼容处理、提升代码性能等</code></p><h1 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h1><p><code>webpack</code><strong>是一个静态资源打包工具</strong></p><p>以一个或多个文件作为打包的入口，将整个项目所有文件编译组合成一个或多个文件输出。</p><p>输出的文件就是编译好的文件，可以在浏览器运行，将<code>webpack</code>输出的文件叫做<code>bundle</code></p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2><p>Webpack的本身功能有限</p><ul><li>开发模式：只能编译JS的<code>ES Moudle</code>语法</li><li>生产模式：还可以压缩JS代码</li></ul><h2 id="开始使用" tabindex="-1"><a class="header-anchor" href="#开始使用" aria-hidden="true">#</a> 开始使用</h2><h4 id="初始化包文件" tabindex="-1"><a class="header-anchor" href="#初始化包文件" aria-hidden="true">#</a> 💡：初始化包文件</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm init -y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="安装webpack和webpack-cli" tabindex="-1"><a class="header-anchor" href="#安装webpack和webpack-cli" aria-hidden="true">#</a> 💡：安装webpack和webpack-cli</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install webpack webpack-cli --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="启用webpack" tabindex="-1"><a class="header-anchor" href="#启用webpack" aria-hidden="true">#</a> 💡：启用webpack</h4><p>指定路径的入口文件，编译到<code>dist</code>目录下，这是在没有配置文件的前提下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack ./src/main.js --mode=development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="基本配置" tabindex="-1"><a class="header-anchor" href="#基本配置" aria-hidden="true">#</a> 基本配置</h1><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h2><ol><li><h4 id="enrty-入口" tabindex="-1"><a class="header-anchor" href="#enrty-入口" aria-hidden="true">#</a> enrty(入口)</h4></li></ol><p>指示Webpack 从哪个文件开始打包</p><ol start="2"><li><h4 id="output-输出" tabindex="-1"><a class="header-anchor" href="#output-输出" aria-hidden="true">#</a> output(输出)</h4></li></ol><p>指示Webpack 打包完的文件输出到哪，如何命名</p><ol start="3"><li><h4 id="loader-加载器" tabindex="-1"><a class="header-anchor" href="#loader-加载器" aria-hidden="true">#</a> loader(加载器)</h4></li></ol><p>webpack 本身只能处理js，json等，其他资源需要借助loader，才可以解析</p><ol start="4"><li><h4 id="plugins-插件" tabindex="-1"><a class="header-anchor" href="#plugins-插件" aria-hidden="true">#</a> plugins(插件)</h4></li></ol><p>扩展webpack 的功能</p><ol start="5"><li><h4 id="mode-模式" tabindex="-1"><a class="header-anchor" href="#mode-模式" aria-hidden="true">#</a> mode(模式)</h4></li></ol><p>开发模式：<code>development</code></p><p>生产模式：<code>production</code></p><h2 id="配置webpack文件" tabindex="-1"><a class="header-anchor" href="#配置webpack文件" aria-hidden="true">#</a> 配置Webpack文件</h2><p>💡：1.在根目录新建配置文件，文件名：<code>webpack.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>


module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token comment">//入口</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">,</span><span class="token comment">//相对路径</span>
    <span class="token comment">//输出</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//指定文件的输出路径</span>
        <span class="token comment">//_dirname 代表当前文件的文件夹目录</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//绝对路径</span>
        <span class="token comment">//文件名</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&#39;main.js&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//加载器</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>
            <span class="token comment">//loader的配置</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//插件</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token comment">//插件的配置</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">//模式</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token string">&#39;development&#39;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>💡：2.启动配置文件</p><p>有了配置文件，会在根目录下找配置文件，读取配置信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="处理样式资源" tabindex="-1"><a class="header-anchor" href="#处理样式资源" aria-hidden="true">#</a> 处理样式资源</h1><p>Webpack 本身不具备识别样式资源的，需要借助<code>Loader</code>来帮助解析样式资源。</p><h2 id="处理css资源" tabindex="-1"><a class="header-anchor" href="#处理css资源" aria-hidden="true">#</a> 处理css资源</h2><h4 id="_1-下载包" tabindex="-1"><a class="header-anchor" href="#_1-下载包" aria-hidden="true">#</a> 💡：1.下载包</h4><p>下载两个loader</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install css-loader style-loader -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-功能介绍" tabindex="-1"><a class="header-anchor" href="#_2-功能介绍" aria-hidden="true">#</a> 💡：2.功能介绍</h4><ul><li><code>css-loader</code>：负责将Css文件编译成Webpack能识别的模块</li><li><code>style-loader</code>：会动态创建一个Style标签，放置Webpack中CSS模块内容</li></ul><h4 id="_3-在入口文件中引入css文件" tabindex="-1"><a class="header-anchor" href="#_3-在入口文件中引入css文件" aria-hidden="true">#</a> 💡：3.在入口文件中引入CSS文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;./css/index.css&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-配置文件" tabindex="-1"><a class="header-anchor" href="#_4-配置文件" aria-hidden="true">#</a> 💡：4.配置文件</h4><p><code>test</code>：检测指定的文件</p><p><code>use</code>：编译是，用指定的加载器编译检测的文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">//加载器</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>
            <span class="token comment">//loader的配置</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//执行顺序是 从右到左，从下到上</span>
                     <span class="token comment">//将js中css通过style标签添加到html文件中生效</span>
                    <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
                   	  <span class="token comment">//将css资源编译成commonjs的模块到js中</span>
                    <span class="token string">&#39;css-loader&#39;</span>   
                <span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-再次编译" tabindex="-1"><a class="header-anchor" href="#_5-再次编译" aria-hidden="true">#</a> 💡：5.再次编译</h4><p>在添加了<code>css-loader</code>后，就把css文件也编译了，并且在引用main.js的页面中创建一个<code>style</code>标签</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="处理less资源" tabindex="-1"><a class="header-anchor" href="#处理less资源" aria-hidden="true">#</a> 处理less资源</h2><h4 id="_1-下载包-1" tabindex="-1"><a class="header-anchor" href="#_1-下载包-1" aria-hidden="true">#</a> 💡：1.下载包</h4><p>下载loader和less</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install --save-dev less-loader less
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-配置文件" aria-hidden="true">#</a> 💡：2.配置文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//加载器</span>
<span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token comment">//loader的配置</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//执行顺序是 从右到左，从下到上</span>
                <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token comment">//将js中css通过style标签添加到html文件中生效</span>
                <span class="token string">&#39;css-loader&#39;</span>    <span class="token comment">//将css资源编译成commonjs的模块到js中</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span>
                <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;less-loader&#39;</span>   <span class="token comment">//先将less编译为css文件</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-再次编译" tabindex="-1"><a class="header-anchor" href="#_3-再次编译" aria-hidden="true">#</a> 💡：3.再次编译</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="处理图片资源" tabindex="-1"><a class="header-anchor" href="#处理图片资源" aria-hidden="true">#</a> 处理图片资源</h1><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//加载器</span>
<span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token comment">//loader的配置</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|webp)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;asset&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是webpack内置的loader，可以直接编译</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>💡：可以把小图片转成<code>base64</code>，把图片转成字符串，打包后不会在目标文件夹中生成。</p><p>配置文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|webp)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">parser</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token comment">//小于10kb的图片转成base64</span>
                <span class="token comment">//优点：减少请求次数    缺点：体积会变大</span>
                <span class="token literal-property property">maxSize</span><span class="token operator">:</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>  <span class="token comment">//10kb</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="修改输出目录" tabindex="-1"><a class="header-anchor" href="#修改输出目录" aria-hidden="true">#</a> 修改输出目录</h1><p>💡：把图片输出在<code>static/images</code>目录下，<code>[hash]是给一个图片文件名，[hash:10]是指定名称长度为10位，[ext]是原来图片的扩展名，[query]查询参数</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//加载器</span>
<span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token comment">//loader的配置</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|webp)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">parser</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span><span class="token punctuation">{</span>
                    <span class="token comment">//小于10kb的图片转成base64</span>
                    <span class="token comment">//优点：减少请求次数    缺点：体积会变大</span>
                    <span class="token literal-property property">maxSize</span><span class="token operator">:</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>  <span class="token comment">//10kb</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">generator</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token comment">//图片输出名称</span>
                <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&#39;static/images/[hash:10][ext][query]&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>💡：修改js输出目录</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">//指定文件的输出路径</span>
    <span class="token comment">//_dirname 代表当前文件的文件夹目录</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//绝对路径</span>
    <span class="token comment">//文件名，js文件放在该目录下，其他资源没有效果，还是放在dist目录下，除非对其他资源修改输出目录</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&#39;static/js/main.js&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="自动清空上次打包" tabindex="-1"><a class="header-anchor" href="#自动清空上次打包" aria-hidden="true">#</a> 自动清空上次打包</h1><p>在输出中，添加一个<code>clean:true</code>，每次打包都会清空上次打包内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//输出</span>
<span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">//指定文件的输出路径</span>
    <span class="token comment">//_dirname 代表当前文件的文件夹目录</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//绝对路径</span>
        <span class="token comment">//文件名</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&#39;static/js/main.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">clean</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="处理字体图标资源" tabindex="-1"><a class="header-anchor" href="#处理字体图标资源" aria-hidden="true">#</a> 处理字体图标资源</h1><h4 id="_1-下载字体图标" tabindex="-1"><a class="header-anchor" href="#_1-下载字体图标" aria-hidden="true">#</a> 💡：1.下载字体图标</h4><p>到阿里巴巴矢量图标库，把图片添加购物车，再添加到图片项目中，下载到本地，解压之后，把<code>.css</code>文件复制到目录中，在入口文件引入该CSS文件，并且把需要的文件复制到项目中，需要如<code>.ttf、.woff2</code>等，调整引入的CSS文件中文件的路径，在解析</p><h4 id="_2-设置图片资源路径" tabindex="-1"><a class="header-anchor" href="#_2-设置图片资源路径" aria-hidden="true">#</a> 💡：2.设置图片资源路径</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;asset/resource&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">generator</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token comment">//图片输出名称</span>
            <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&#39;static/media/[hash][ext][query]&#39;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="处理其他资源" tabindex="-1"><a class="header-anchor" href="#处理其他资源" aria-hidden="true">#</a> 处理其他资源</h1><p>都是直接输出在指定目录下，原封不动输出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(ttf|woff2?|map3|map4|avi)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;asset/resource&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">generator</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token comment">//图片输出名称</span>
            <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&#39;static/media/[hash][ext][query]&#39;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="处理js资源" tabindex="-1"><a class="header-anchor" href="#处理js资源" aria-hidden="true">#</a> 处理js资源</h1><p>Webpack对js处理有限，只能编译ES模块化语法，不能编译其他语法，需要做一些兼容性处理</p><ul><li>针对js兼容性处理，使用<code>Babel</code>来完成</li><li>针对代码格式，使用<code>Eslint</code>来完成</li></ul><p>先完成<code>Eslint</code>，检测代码格式无误后，再用<code>Babel</code>做兼容性处理</p><h2 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> Eslint</h2>`,92),v={href:"http://eslint.cn/",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>也可以安装VSCODE的插件<code>Eslint</code>，可以自动实时的检测定义的配置文件，安装的插件会把打包好的文件也检查出错，需要一个配置文件<code>.eslintignore</code>来指定忽略哪些文件</p><p><code>.eslintignore</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可组装的<code>JS</code>和<code>JSX</code>检查工具，是一个插件</p><p>使用Eslint，关键是写Eslint配置文件，其中添加各种规则，运行Eslint时就会以写的规则对代码进行检查</p><h3 id="配置文件-1" tabindex="-1"><a class="header-anchor" href="#配置文件-1" aria-hidden="true">#</a> 配置文件</h3><p>配置文件有很多格式：</p><ul><li><code>.eslintrc.*</code><ul><li><code>.eslintrc</code></li><li><code>.eslintrc.js</code>（用）</li><li><code>.eslintrc.json</code></li></ul></li><li><code>package.json</code>中 <code>eslintConfig</code>: 不需要创建配置文件</li></ul><p>区别是配置格式不一样，只需要一个配置文件</p><h3 id="具体配置" tabindex="-1"><a class="header-anchor" href="#具体配置" aria-hidden="true">#</a> 具体配置</h3><p><code>.eslintrc.js</code>配置文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exprts <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//解析选项</span>
    <span class="token literal-property property">parserOptions</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//具体检查规则</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//继承其他规则</span>
    <span class="token keyword">extends</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>parserOptions</code>解析选项</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>parserOptions:{
    ecmaVersion:6,      //ES6
    sourceType:&#39;module&#39; //es module
},
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>rules</code>规则 <ul><li><code>&#39;off&#39;</code>或<code>0</code>- 关闭规则</li><li><code>&#39;warn&#39;</code>或<code>1</code>- 开启规则，使用警告级别的错误，不会退出程序</li><li><code>&#39;error&#39;</code>或<code>2</code>- 开启规则，使用错误级别的错误，会退出程序</li></ul></li></ol><p>有很多规则，<code>no-var</code>只是其中一个</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rules:{
	&quot;no-var&quot;:2  //禁止使用var定义变量
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>extends继承</li></ol><p>可以使用现有的规则，直接引入即可</p><ul><li><mark>Eslint官方规则</mark>：<code>eslint:recommended</code></li><li><mark>Vue Cli 官方规则</mark>：<code>plugin:vue/essential</code></li><li><mark>Reack Cli官方规则</mark>：<code>react-app</code></li></ul><h3 id="eslint使用" tabindex="-1"><a class="header-anchor" href="#eslint使用" aria-hidden="true">#</a> Eslint使用</h3><ol><li>安装</li></ol><p>安装eslin和eslint-webpack-plugin</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install eslint eslint-webpack-plugin --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>2. 在webpack配置中先引入才可以使用
</code></pre><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const ESLintPlugin = require(&#39;eslint-webpack-plugin&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>把插件添加到插件配置</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token comment">//插件</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token comment">//插件的配置</span>
        <span class="token keyword">new</span> <span class="token class-name">ESLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">//检查哪个目录或文件</span>
            <span class="token literal-property property">context</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>定义配置文件<code>.eslintrc.js</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//继承Eslint 规则</span>
    <span class="token keyword">extends</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">//环境变量</span>
    <span class="token literal-property property">env</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">node</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token comment">//启动node中全局变量</span>
        <span class="token literal-property property">browser</span><span class="token operator">:</span><span class="token boolean">true</span>    <span class="token comment">//启动浏览器中全局变量</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">parserOptions</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span>      <span class="token comment">//ES6</span>
        <span class="token literal-property property">sourceType</span><span class="token operator">:</span><span class="token string">&#39;module&#39;</span> <span class="token comment">//es module</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token string-property property">&quot;no-var&quot;</span><span class="token operator">:</span><span class="token number">2</span>  <span class="token comment">//禁止使用var定义变量</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="babel" tabindex="-1"><a class="header-anchor" href="#babel" aria-hidden="true">#</a> Babel</h2><p>用于将ES6语法编写的代码转换成向后兼容的JS语法，使能够在旧版浏览器中运行或其他环境中</p><h3 id="_1-配置文件" tabindex="-1"><a class="header-anchor" href="#_1-配置文件" aria-hidden="true">#</a> 1. 配置文件</h3><ul><li><code>babel.config.*</code> ： 新建文件，位于根目录 <ul><li><code>babel.config.js</code></li><li><code>babel.config.json</code></li></ul></li><li><code>babelrc.*</code>：新建文件，位于根目录 <ul><li><code>babelrc</code></li><li><code>babelrc.js</code></li><li><code>babelrc.json</code></li></ul></li><li><code>package.json</code>中<code>babel</code>：不需要新建文件，在原有的文件中写</li></ul><p>Babel会查找和读取配置文件，所以配置文件只需要存在一个即可</p><h3 id="_2-具体配置" tabindex="-1"><a class="header-anchor" href="#_2-具体配置" aria-hidden="true">#</a> 2. 具体配置</h3><p>配置文件<code>babel.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//预设</span>
    <span class="token literal-property property">presets</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>presets</code>预设：通过一组Babel插件，来扩展Babel功能</p><ul><li><code>@babel/preset-env</code>：允许使用最新的JavaScript</li><li><code>@babel/preset-react</code>：编译react jsx语法的预设</li><li><code>@babel/preset-typescript</code>：编译ts的语法预设</li></ul><h3 id="_3-在webpack中使用" tabindex="-1"><a class="header-anchor" href="#_3-在webpack中使用" aria-hidden="true">#</a> 3.在webpack中使用</h3><p>💡：1.安装</p><p>需要安装三个插件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -D babel-loader @babel/core @babel/preset-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>💡：2. 添加babel-loader到<code>webpack配置文件</code>的loader列表中</p><p>被注释掉的<code>presets:[]</code>可以写在webpack配置文件中，也可以创建配置文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token comment">//排除node_modules中的js文件，这些文件不处理</span>
      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">//智能预设，能够编译ES6的语法</span>
          <span class="token comment">//presets: [&#39;@babel/preset-env&#39;]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>babel.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//智能预设，可以编译ES6语法</span>
    <span class="token literal-property property">presets</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="处理html资源" tabindex="-1"><a class="header-anchor" href="#处理html资源" aria-hidden="true">#</a> 处理Html资源</h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install --save-dev html-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>先在webpack配置文件上引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其次在<code>plugins:[]</code>代码处<code>new</code>创建</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index_bundle.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><ol><li>原先的html文件就不需要引入js的代码</li><li>如果不指定模板，则输出的html文件是空的，只引入了JS</li></ol><p>解决：</p><ul><li>模板，指定以那个文件为模板创建新的html文件，否则内容会全部丢失</li><li>新的html：1.结构和指定的一模一样 2.自动引入打包输出的资源</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">//插件</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token comment">//插件的配置</span>
        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;public/index.html&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="自动化" tabindex="-1"><a class="header-anchor" href="#自动化" aria-hidden="true">#</a> 自动化</h1><p>写完代码之后不需要重新打包，一切自动化</p><p>使用服务器自动化打包时不会有输出，也就是<code>dist</code>目录下没有文件，而是在内存中打包</p><h2 id="_1-下载包-2" tabindex="-1"><a class="header-anchor" href="#_1-下载包-2" aria-hidden="true">#</a> 1. 下载包</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install webpack-dev-server -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置" aria-hidden="true">#</a> 2.配置</h2><p>和<code>loader、plugins</code>等同级</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//开发服务器</span>
<span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span><span class="token comment">//启动服务器域名</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token string">&quot;3000&quot;</span><span class="token punctuation">,</span><span class="token comment">//启动服务器端口号</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token comment">//是否自动打开浏览器</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-启动" tabindex="-1"><a class="header-anchor" href="#_3-启动" aria-hidden="true">#</a> 3.启动</h2><p>不再像打包webpack一样使用<code>npx webpack</code>，这样不会启动服务器</p><p>应该是<code>npx webpack server</code>，就会启动服务器，修改代码后自动打包</p>`,73);function m(b,h){const e=o("ExternalLinkIcon");return l(),i("div",null,[r,n("p",null,[s("文档网站： "),n("a",d,[s("https://www.webpackjs.com/guides/getting-started/"),p(e)])]),u,n("p",null,[n("a",v,[s("http://eslint.cn/"),p(e)])]),k])}const x=t(c,[["render",m],["__file","Webpack5.html.vue"]]);export{x as default};
