import{_ as p,W as o,X as c,Y as n,Z as s,$ as e,a2 as t,G as i}from"./framework-61af4b36.js";const l={},r=n("h1",{id:"",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#","aria-hidden":"true"},"#"),s(' ""')],-1),u=n("p",null,"项目笔记，不记录整体代码，只记录技术代码，项目地址",-1),d={href:"https://gitee.com/EricKiku/project",target:"_blank",rel:"noopener noreferrer"},k=t(`<h1 id="part-1" tabindex="-1"><a class="header-anchor" href="#part-1" aria-hidden="true">#</a> Part 1</h1><h2 id="_1、-vue-cli初始化项目" tabindex="-1"><a class="header-anchor" href="#_1、-vue-cli初始化项目" aria-hidden="true">#</a> 1、 vue-cli初始化项目</h2><p>使用vue2版本</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ vue create app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>node_modules</code>文件夹：项目依赖文件夹</p></li><li><p><code>public</code>文件夹：放置一些静态资源，这里的静态资源打包的时候，会原封不动的打包</p></li><li><p><code>src</code>文件夹：程序员源代码文件夹</p><ul><li><code>assets</code>文件夹：放置静态资源，这里的静态资源在打包的时候，会被当做静态资源，打包到JS文件里</li><li><code>components</code>文件夹：放置非路由全局组件</li><li><code>App.vue</code>：唯一的根组件</li><li><code>main.js</code>：程序入口文件</li></ul></li><li><p><code>babel.config.js</code>：babel配置文件</p></li><li><p><code>package.json</code>：项目身份证，项目的相关信息</p></li><li><p><code>package-lock.json</code>：缓存性文件</p></li><li><p><code>README.md</code>：说明性文件</p></li></ul><h2 id="_2、-项目配置" tabindex="-1"><a class="header-anchor" href="#_2、-项目配置" aria-hidden="true">#</a> 2、 项目配置</h2><ol><li><p>项目运行时，浏览器自动打开</p><p><code>package.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service serve --open --host=localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service lint&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>关闭eslint校验 <code>vue.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lintOnSave</span><span class="token operator">:</span><span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>src文件夹简写，配置别名<code>@</code><code>jsconfig.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	...
    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;src/*&quot;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_3、创建非路由组件" tabindex="-1"><a class="header-anchor" href="#_3、创建非路由组件" aria-hidden="true">#</a> 3、创建非路由组件</h2><p>完成组件Header和Footer业务</p><p>创建组件：组件结构 + 组件样式 + 图片资源</p><p>采用less样式。需要通过less、less-loader处理less，浏览器才可以识别</p><p>安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev less-loader@4.1.0 less@3.9.0 <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时浏览器可以识别，但是组件依然报错，方法是在组件文件中：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>less<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
...
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="part-2" tabindex="-1"><a class="header-anchor" href="#part-2" aria-hidden="true">#</a> Part 2</h1><h2 id="_4、完成路由组件" tabindex="-1"><a class="header-anchor" href="#_4、完成路由组件" aria-hidden="true">#</a> 4、完成路由组件</h2><p>完成Home,Search,Login,Register四个组件</p><p>安装Vue-Router</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> vue-router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-pages | views</code>文件夹：经常放置路由组件</p><p>配置路由：</p>`,22),v={href:"https://blog.erickiku.xyz/vue/vuerouter.html",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>路由组件与非路由组件的区别：</p><ul><li>路由组件一般放置在pages | views 文件夹中，非路由组件一般放置在components文件夹中。</li><li>路由组件一般需要在router文件夹中进行注册，使用组件的名字，非路由组件使用的时候，是以标签的形式使用</li><li>在入口文件注册路由后，组件身上都有了<code>$route</code>和<code>$router</code></li><li><code>$route</code>：用来获取路由信息</li><li><code>$router</code>：用来编程式导航之路由跳转[push、replace]</li></ul><p>路由重定向：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>*</code>代表的是任意路由匹配，指的是如果当前的routes中没有对应的路由，都会被<code>*</code>所匹配，redirect指的是重定向，重定向路由位置</p><p>路由元信息：</p><p>可以通过路由元信息<code>meta</code>，来给路由携带一些参数，该项目用于判断是否显示Footer组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">showFooter</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取路由meta的值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">&quot;$route.meta.showFooter&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编程式路由导航传参：</p><p>传递params和query参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">searchInfo</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>searchInput
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">query</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">searchInfo</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>searchInput
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收参数：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>params:{{ $route.params.searchInfo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>query:{{ $route.query.searchInfo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重写push和replace方法</p><p>从一个路由跳转到相同的路由时，会报错，解决方法：</p><p>在路由配置文件中重写两个跳转方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 重写push和replace</span>
<span class="token comment">// 保存源push</span>
<span class="token keyword">let</span> originPush <span class="token operator">=</span> <span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">;</span>
<span class="token keyword">let</span> originReplace <span class="token operator">=</span> <span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>replace<span class="token punctuation">;</span>
<span class="token comment">// location是原本push应该传入的参数</span>
<span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> onResolve<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>onResolve <span class="token operator">&amp;&amp;</span> onReject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">originPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">,</span> onResolve<span class="token punctuation">,</span> onReject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">originPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">replace</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> onResolve<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>onResolve <span class="token operator">&amp;&amp;</span> onReject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">originReplace</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">,</span> onResolve<span class="token punctuation">,</span> onReject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">originReplace</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、注册全局组件" tabindex="-1"><a class="header-anchor" href="#_5、注册全局组件" aria-hidden="true">#</a> 5、注册全局组件</h2><p>属于哪个路由下的组件，就在哪个路由页面文件夹中创建组件</p><p>创建完成后，在main.js引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> TypeNav <span class="token keyword">from</span> <span class="token string">&#39;@/pages/Home/TypeNav&#39;</span>

Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>TypeNav<span class="token punctuation">.</span>name<span class="token punctuation">,</span>TypeNav<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局注册<code>Vue.commponent(使用时的名字，组件名)</code></p><p>全局注册后，就可以在所有组件使用了，不需要在每个组件单独引入</p><h2 id="_6、-axios二次封装" tabindex="-1"><a class="header-anchor" href="#_6、-axios二次封装" aria-hidden="true">#</a> 6、 axios二次封装</h2><p>为什么要进行二次封装axios？</p><p>方便设置请求拦截器，响应拦截器</p><p>请求拦截器：在发请求之前处理一些业务</p><p>响应拦截器：当服务器返回数据后，可以处理一些业务</p><p><code>src/api/request.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// axios二次封装</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>

<span class="token comment">// 使用axios.create创建一个axios实例</span>
<span class="token comment">// 创建的实例等于axios</span>
<span class="token keyword">const</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置</span>
    <span class="token comment">// 基础路径，发送请求的时候，会自动在路径后加上</span>
    <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 超时时间</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 请求拦截器</span>
request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// config配置对象，其中有headers等参数</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 响应拦截器</span>
request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 成功的回调</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 失败的回调</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;fail&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> request<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、接口统一管理" tabindex="-1"><a class="header-anchor" href="#_7、接口统一管理" aria-hidden="true">#</a> 7、接口统一管理</h2><p><code>src/api/index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对API进行统一管理</span>
<span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">&#39;./request&#39;</span>
<span class="token comment">//request 就是 axios</span>
<span class="token comment">// 三级联动接口</span>
<span class="token comment">// /api/product/getBaseCategoryList   GET   无参数</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">reqCategoryList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&#39;/product/getBaseCategoryList&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;get&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跨域问题</p><p>方法：代理</p><ul><li>请求前缀：指定哪些请求需要使用代理</li><li>目标地址：想要访问的服务器，也就是后端地址</li><li>路径重写：如果后端真实接口是没有字符<code>api</code>的，就需要把代理所添加的api转为空串。如果真实接口是有api的，就不需要重写</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>			<span class="token comment">//请求前缀</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:5555&#39;</span><span class="token punctuation">,</span>	<span class="token comment">//目标地址</span>
        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&#39;^/api&#39;</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>	<span class="token comment">//把实际请求路径中的api换为空串</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、nprogress进度条" tabindex="-1"><a class="header-anchor" href="#_8、nprogress进度条" aria-hidden="true">#</a> 8、nprogress进度条</h2><p>请求发送中的时候，在页面上方显示一个进度条，请求结果响应之后，进度条消失</p><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> i <span class="token parameter variable">--save</span> nprogress
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入进度条</span>
<span class="token keyword">import</span> nProgress <span class="token keyword">from</span> <span class="token string">&#39;nprogress&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入进度条样式，可以修改css文件中的样式</span>
<span class="token keyword">import</span> <span class="token string">&quot;nprogress/nprogress.css&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动和结束</p><p>在请求拦截器中启动，只要有请求发送，就一定会被请求拦截器发现</p><p>在响应拦截器中结束，收到数据结束进度条</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求拦截器</span>
request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// config配置对象，其中有headers等参数</span>
    <span class="token comment">// 开始进度条</span>
    nProgress<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 响应拦截器</span>
request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 成功的回调</span>
    <span class="token comment">// 结束进度条</span>
    nProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 失败的回调</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;fail&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、vuex状态管理" tabindex="-1"><a class="header-anchor" href="#_9、vuex状态管理" aria-hidden="true">#</a> 9、vuex状态管理</h2>`,51),b={href:"https://blog.erickiku.xyz/vue/vuex.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> i vuex@3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置及举例 <code>src/store/index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>

<span class="token comment">// state:存储数据的地方</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token comment">// mutations：修改state的手段</span>
<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//参数1：state仓库，参数2：数据</span>
    <span class="token constant">ADD</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        state<span class="token punctuation">.</span>count <span class="token operator">+=</span> value 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// actions：处理业务逻辑</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//commit是从context中解构出来的，用来调用mutations中的方法</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//参数1：mutations方法名，参数2：数据</span>
        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;ADD&quot;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// getters：state的计算属性</span>
<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 对外暴露实例</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    state<span class="token punctuation">,</span>
    mutations<span class="token punctuation">,</span>
    actions<span class="token punctuation">,</span>
    getters
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册</p><p>注册之后，所有组件实例上就会多一个属性<code>$store</code></p><p><code>main.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入vuex</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;@/store&#39;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
  router<span class="token punctuation">,</span>
  store			<span class="token comment">//注册vuex</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Vuex的便利技巧：</p>`,9),g={href:"https://blog.erickiku.xyz/vue/vuex.html#mapstate",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.erickiku.xyz/vue/vuex.html#mapmutations",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.erickiku.xyz/vue/vuex.html#mapactions",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"_10、vuex模块化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10、vuex模块化","aria-hidden":"true"},"#"),s(" 10、Vuex模块化")],-1),_=n("p",null,"两个形式：",-1),j={href:"https://blog.erickiku.xyz/vue/vuex.html#%E6%A8%A1%E5%9D%97%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>第二个：拆分成文件夹：</p><p>把不同的模块分开成不同 的vuex仓库，分开管理</p><p>在<code>store</code>文件夹下创建对应模块的文件夹，如<code>home、search</code>文件夹</p><p>在文件夹下创建<code>index.js</code>文件，在文件中写完整的vuex配置并暴露</p><p><code>home/index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">,</span>mutations<span class="token punctuation">,</span>actions
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在主文件中使用模块注册</p><p><code>store/index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>

<span class="token comment">//引入多个仓库</span>
<span class="token keyword">import</span> home <span class="token keyword">from</span> <span class="token string">&#39;./home&#39;</span>
<span class="token keyword">import</span> search <span class="token keyword">from</span> <span class="token string">&#39;./search&#39;</span>

<span class="token comment">// 对外暴露实例</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//配置在modules对象中</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        home<span class="token punctuation">,</span>search
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取和操作模块化的vuex方法：</p>`,10),q={href:"https://blog.erickiku.xyz/vue/vuex.html#%E6%A8%A1%E5%9D%97%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},R=t(`<h2 id="_11、vuex模块化操作" tabindex="-1"><a class="header-anchor" href="#_11、vuex模块化操作" aria-hidden="true">#</a> 11、vuex模块化操作</h2><p>发送一个axios请求，然后把数据存储在state中的操作：</p><p>1、在组件中去调用vuex其中一个模块的actions方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//如果是在某个模块中，则方法名前加上模块名，如home/</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;home/categoryList&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在home仓库模块中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1. 先引入统一接口文件中的接口，由于是分别暴露，所以结构</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> reqCategoryList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/api/index&#39;</span>

<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">categoryList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">CATEGORYLIST</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state<span class="token punctuation">.</span>categoryList <span class="token operator">=</span> value
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2.通过API里的接口函数调用，获取数据</span>
    <span class="token keyword">async</span> <span class="token function">categoryList</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> res <span class="token operator">=</span>  <span class="token keyword">await</span> <span class="token function">reqCategoryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//3.调用mutations方法，修改state的值</span>
            <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;CATEGORYLIST&quot;</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">namespaced</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    state<span class="token punctuation">,</span> mutations<span class="token punctuation">,</span> actions
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12、-mouseenter与-mouseover" tabindex="-1"><a class="header-anchor" href="#_12、-mouseenter与-mouseover" aria-hidden="true">#</a> 12、@mouseenter与@mouseover</h2><p>vue事件处理，可以在组件上定义事件，从而触发方法</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">@mouseenter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mouseenter(index)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>区别：</p><p><code>mouseover</code>：当鼠标移入元素或其子元素都会触发事件，所以有一个重复触发，冒泡过程。对应的移除事件是 <code>mouseout</code><code>mouseenter</code>:当鼠标移入元素本身（不包含元素的子元素）会触发事件，也就是不会冒泡。对应的移除事件是 <code>mouseleave</code></p><p><code>mouseleave</code>：鼠标移出组件时触发</p><h1 id="part-3" tabindex="-1"><a class="header-anchor" href="#part-3" aria-hidden="true">#</a> Part 3</h1><h2 id="_13、防抖-节流" tabindex="-1"><a class="header-anchor" href="#_13、防抖-节流" aria-hidden="true">#</a> 13、防抖/节流</h2><p>节流：规定时间间隔内不会重复触发，超过间隔才会触发</p><p>防抖：前面的所有触发都取消，只执行最后一次</p><p>可以去使用js库<code>lodash</code>，来使用防抖与节流功能</p>`,17),V={href:"https://www.lodashjs.com/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.lodashjs.com/docs/lodash.debounce",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.lodashjs.com/docs/lodash.throttle",target:"_blank",rel:"noopener noreferrer"},$=t(`<h2 id="_14、路由跳转合并" tabindex="-1"><a class="header-anchor" href="#_14、路由跳转合并" aria-hidden="true">#</a> 14、路由跳转合并</h2><p>有时该路由组件中含有<code>query</code>或者<code>params</code>参数，然后跳转时需要带上这些参数，就是合并参数跳转</p><p>如跳转时需要携带<code>query</code>参数还要携带该组件所拥有的<code>params</code>参数，则可以：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;search&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">searchInfo</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>searchInfo
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        categoryName<span class="token punctuation">,</span>
        categoryId<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15、swiper轮播图" tabindex="-1"><a class="header-anchor" href="#_15、swiper轮播图" aria-hidden="true">#</a> 15、swiper轮播图</h2>`,5),E={href:"https://swiper.com.cn/",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>适合于PC和移动端的滑动动画</p><h2 id="_16、object-assign" tabindex="-1"><a class="header-anchor" href="#_16、object-assign" aria-hidden="true">#</a> 16、Object.assign()</h2><p>合并对象</p><p>把除了参数1的所有后续参数合并到参数1身上，属性一样的替换值</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Object.assign(obj1,obj2,obj3..)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="part-4" tabindex="-1"><a class="header-anchor" href="#part-4" aria-hidden="true">#</a> Part 4</h1><h2 id="_1、登录注册" tabindex="-1"><a class="header-anchor" href="#_1、登录注册" aria-hidden="true">#</a> 1、登录注册</h2><p><code>token</code>令牌</p>`,8),P={href:"https://www.cnblogs.com/OnlyOne2048/p/14203654.html",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>登录成功时，服务器会返回相关信息和一个<code>token</code>标识符，一般只返回token。前台持久化存储<code>token</code>，之后会用token去获取数据</p><p>不能存在vuex，因为不是持久化，刷新就会消失</p><p>token存储在localStorage中，可以实现持久化存储和自动登录等功能</p><p>在axios的封装中的请求拦截器中配置，如果有token，则每次发送请求都把token传到后端，用于验证用户信息</p><p><code>config.headers.token</code>会把token属性存储在请求头中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//请求拦截器:将来项目中【N个请求】，只要发请求,会触发请求拦截器!!!</span>
requests<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//请求拦截器:请求头【header】,请求头能否给服务器携带参数</span>
    <span class="token comment">//请求拦截器：其实项目中还有一个重要的作用,给服务器携带请求们的公共的参数</span>
    <span class="token comment">//进度条开始</span>
    nprogress<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//token[公共参数]</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//每一次发请求,请求头携带用户临时身份</span>
    <span class="token comment">// config.headers.userTempId = SET_USERID();</span>
    <span class="token comment">//不管那个模块发请求,请求拦截器，都可以触发。请求拦截器可以通过请求头每一次协大公共参数给服务器【用户未登录的临时身份】</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在vuex中的state中，存储token，值是<code>localStorage.getItem(&#39;token&#39;)</code>，这样每次使用 仓库的token时，都可以获取到</p><h2 id="_2、退出登录" tabindex="-1"><a class="header-anchor" href="#_2、退出登录" aria-hidden="true">#</a> 2、退出登录</h2><p>退出登录需要</p><ol><li>发送请求，通知服务器退出登录，清除服务器的token和浏览器的token</li><li>清除项目中的一些用户数据</li></ol><h2 id="_3、导航守卫" tabindex="-1"><a class="header-anchor" href="#_3、导航守卫" aria-hidden="true">#</a> 3、导航守卫</h2><p>比如，用户没有登录，就不能跳转到购物车组件，用户登陆了，就不能再跳到登录组件</p><p><code>导航</code>表示路由正在发生改变</p><ul><li><code>to</code>：可以获取到跳转的目标路由</li><li><code>from</code>：可以获取从哪个路由开始跳转</li><li><code>next</code>：三种写法 <ul><li><code>next()</code>：直接放行</li><li><code>next(&#39;/path&#39;)</code>：放行到指定路由 <ul><li>也可以是<code>next({name:&#39;Home&#39;})</code>的name写法</li></ul></li><li><code>next(false)</code>：<strong><code>next(false)</code></strong>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 <code>from</code> 路由对应的地址。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h1><blockquote><p>路由跳转传参的时候，对象写法时，path和params可以一起使用吗？</p></blockquote><p>不可以。必须使用name参数</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//错
this.$route.push({
	path:&#39;/search&#39;,
	params:{k:this.v}
})
//对
this.$route.push({
	name:&#39;search&#39;,
	params:{k:this.v}
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如何指定 params参数可传可不传</p></blockquote><p>当定义路由时，可以在path路径后为params参数占位，如果占位了，但是没有传params参数，则URL路径会出现问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//定义路由时，给params参数占位</span>
<span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/search/:searchInfo&#39;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>想要指定params参数就算占位了，也是可传可不传时，只需在占位字符串后加上<code>?</code>即可。即是不传，也不会出现URL问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//定义路由时，给params参数占位</span>
<span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/search/:searchInfo?&#39;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>params参数可以传递也可以不传递时，如果传的是空串，如何解决</p></blockquote><p>当params占位符后有?时，如果传的是空串，那么URL路径也会出现问题，解决方法就是</p><p>在路由跳转时，在params参数后用||连接undefined，这样传递空串时URL也不会有问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">searchInfo</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token operator">||</span><span class="token keyword">undefined</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>路由组件能不能路由跳转时传递props数据</p></blockquote><p>能。定义路由时，定义props属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//第一种写法，把对象中的值通过props方式传给组件</span>
<span class="token comment">// props: {id:&#39;001&#39;,title:&#39;hello&#39;}</span>

<span class="token comment">//第二种写法，props为布尔值，为true，就把路由收到的所有params参数通过props传给组件</span>
<span class="token comment">//props:true</span>

<span class="token comment">//第三种写法，函数，该函数中的返回值中的每一组键值都会通过props传给组件</span>
<span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>{{id}}{{title}}

//vc实例：
props: [&#39;id&#39;,&#39;title&#39;],
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>封装组件，如：日历，分页器</p></blockquote>`,34);function C(T,N){const a=i("ExternalLinkIcon");return o(),c("div",null,[r,u,n("p",null,[n("a",d,[s("前台"),e(a)])]),k,n("p",null,[n("a",v,[s("个人博客---路由"),e(a)])]),m,n("p",null,[s("云笔记："),n("a",b,[s("Vuex | EricKiku"),e(a)])]),h,n("p",null,[n("a",g,[s("mapState"),e(a)])]),n("p",null,[n("a",y,[s("mapMutations"),e(a)])]),n("p",null,[n("a",f,[s("mapActions"),e(a)])]),x,_,n("p",null,[s("第一个："),n("a",j,[s("同一个文件内"),e(a)])]),w,n("p",null,[n("a",q,[s("vuex模块化操作"),e(a)])]),R,n("p",null,[n("a",V,[s("Lodash"),e(a)])]),n("p",null,[n("a",I,[s("防抖"),e(a)])]),n("p",null,[n("a",L,[s("节流"),e(a)])]),$,n("p",null,[n("a",E,[s("官网地址"),e(a)])]),S,n("p",null,[n("a",P,[s("SpringBoot生成token实现"),e(a)])]),A])}const O=p(l,[["render",C],["__file","项目笔记.html.vue"]]);export{O as default};
