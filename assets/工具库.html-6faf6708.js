const l=JSON.parse('{"key":"v-4c3e27c6","path":"/zh/posts/%E5%B7%A5%E5%85%B7%E5%BA%93.html","title":"工具库封装","lang":"zh-CN","frontmatter":{"title":"工具库封装","icon":"org-utility","category":["随笔"],"description":"\\"\\" 1. 函数相关 1.1 call函数封装 ⭐ JavaScript 函数 Call 方法重用 使用 call() 方法，可以编写能够在不同对象上使用的方法。 通过 call()，能够使用属于另一个对象的方法，并改变this的指向 第一个参数是指向的对象，后面可以带实参 var person = { fullName: function() { return this.firstName + \\" \\" + this.lastName; } } var person1 = { firstName:\\"Bill\\", lastName: \\"Gates\\", } var person2 = { firstName:\\"Steve\\", lastName: \\"Jobs\\", } person.fullName.call(person1); // 将返回 \\"Bill Gates\\"","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/%E5%B7%A5%E5%85%B7%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"工具库封装"}],["meta",{"property":"og:description","content":"\\"\\" 1. 函数相关 1.1 call函数封装 ⭐ JavaScript 函数 Call 方法重用 使用 call() 方法，可以编写能够在不同对象上使用的方法。 通过 call()，能够使用属于另一个对象的方法，并改变this的指向 第一个参数是指向的对象，后面可以带实参 var person = { fullName: function() { return this.firstName + \\" \\" + this.lastName; } } var person1 = { firstName:\\"Bill\\", lastName: \\"Gates\\", } var person2 = { firstName:\\"Steve\\", lastName: \\"Jobs\\", } person.fullName.call(person1); // 将返回 \\"Bill Gates\\""}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-12T06:26:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-12T06:26:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工具库封装\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-12T06:26:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.1 call函数封装","slug":"_1-1-call函数封装","link":"#_1-1-call函数封装","children":[{"level":3,"title":"⭐ JavaScript 函数 Call","slug":"javascript-函数-call","link":"#javascript-函数-call","children":[]},{"level":3,"title":"⭐ 封装Call函数","slug":"封装call函数","link":"#封装call函数","children":[]}]},{"level":2,"title":"1.2 apply函数封装","slug":"_1-2-apply函数封装","link":"#_1-2-apply函数封装","children":[{"level":3,"title":"⭐ 封装apply函数","slug":"封装apply函数","link":"#封装apply函数","children":[]}]},{"level":2,"title":"1.3 bind函数封装","slug":"_1-3-bind函数封装","link":"#_1-3-bind函数封装","children":[{"level":3,"title":"⭐ 封装apply函数","slug":"封装apply函数-1","link":"#封装apply函数-1","children":[]}]},{"level":2,"title":"1.4 函数节流与防抖","slug":"_1-4-函数节流与防抖","link":"#_1-4-函数节流与防抖","children":[{"level":3,"title":"⭐ 函数防抖","slug":"函数防抖","link":"#函数防抖","children":[]},{"level":3,"title":"⭐ 函数节流","slug":"函数节流","link":"#函数节流","children":[]}]},{"level":2,"title":"1.1 map()","slug":"_1-1-map","link":"#_1-1-map","children":[{"level":3,"title":"👴 原生","slug":"原生","link":"#原生","children":[]},{"level":3,"title":"⭐ 封装map函数","slug":"封装map函数","link":"#封装map函数","children":[]}]},{"level":2,"title":"1.2 reduce()","slug":"_1-2-reduce","link":"#_1-2-reduce","children":[{"level":3,"title":"👴 原生","slug":"原生-1","link":"#原生-1","children":[]},{"level":3,"title":"⭐ 封装reduce函数","slug":"封装reduce函数","link":"#封装reduce函数","children":[]}]},{"level":2,"title":"1.3 filter()","slug":"_1-3-filter","link":"#_1-3-filter","children":[{"level":3,"title":"👴 原生","slug":"原生-2","link":"#原生-2","children":[]},{"level":3,"title":"⭐ 封装filter函数","slug":"封装filter函数","link":"#封装filter函数","children":[]}]},{"level":2,"title":"1.4 find()","slug":"_1-4-find","link":"#_1-4-find","children":[{"level":3,"title":"👴 原生","slug":"原生-3","link":"#原生-3","children":[]},{"level":3,"title":"⭐封装find函数","slug":"封装find函数","link":"#封装find函数","children":[]}]},{"level":2,"title":"1.5 findIndex()","slug":"_1-5-findindex","link":"#_1-5-findindex","children":[{"level":3,"title":"👴 原生","slug":"原生-4","link":"#原生-4","children":[]},{"level":3,"title":"⭐封装findIndex函数","slug":"封装findindex函数","link":"#封装findindex函数","children":[]}]},{"level":2,"title":"1.6 every&some","slug":"_1-6-every-some","link":"#_1-6-every-some","children":[{"level":3,"title":"👴 原生","slug":"原生-5","link":"#原生-5","children":[]},{"level":3,"title":"⭐ 封装函数","slug":"封装函数","link":"#封装函数","children":[]}]},{"level":2,"title":"1.7 去重","slug":"_1-7-去重","link":"#_1-7-去重","children":[{"level":3,"title":"👴 原生","slug":"原生-6","link":"#原生-6","children":[]},{"level":3,"title":"⭐ 封装函数","slug":"封装函数-1","link":"#封装函数-1","children":[]}]},{"level":2,"title":"1.8 数组合并concat","slug":"_1-8-数组合并concat","link":"#_1-8-数组合并concat","children":[{"level":3,"title":"👴 原生","slug":"原生-7","link":"#原生-7","children":[]},{"level":3,"title":"⭐ 封装函数","slug":"封装函数-2","link":"#封装函数-2","children":[]}]},{"level":2,"title":"1.9 slice切片","slug":"_1-9-slice切片","link":"#_1-9-slice切片","children":[{"level":3,"title":"👴 原生","slug":"原生-8","link":"#原生-8","children":[]},{"level":3,"title":"⭐ 封装slice函数","slug":"封装slice函数","link":"#封装slice函数","children":[]}]},{"level":2,"title":"1.10 数组扁平化","slug":"_1-10-数组扁平化","link":"#_1-10-数组扁平化","children":[{"level":3,"title":"⭐ 封装函数","slug":"封装函数-3","link":"#封装函数-3","children":[]}]},{"level":2,"title":"1.11 数组分组","slug":"_1-11-数组分组","link":"#_1-11-数组分组","children":[{"level":3,"title":"⭐ 封装函数","slug":"封装函数-4","link":"#封装函数-4","children":[]}]},{"level":2,"title":"1.12 数组差异","slug":"_1-12-数组差异","link":"#_1-12-数组差异","children":[]},{"level":2,"title":"3.1 创建对象","slug":"_3-1-创建对象","link":"#_3-1-创建对象","children":[]},{"level":2,"title":"3.2 比较对象类型","slug":"_3-2-比较对象类型","link":"#_3-2-比较对象类型","children":[]},{"level":2,"title":"3.3 对象合并","slug":"_3-3-对象合并","link":"#_3-3-对象合并","children":[]},{"level":2,"title":"3.4 对象/数组拷贝","slug":"_3-4-对象-数组拷贝","link":"#_3-4-对象-数组拷贝","children":[{"level":3,"title":"❕ 区别深拷贝与浅拷贝","slug":"区别深拷贝与浅拷贝","link":"#区别深拷贝与浅拷贝","children":[]},{"level":3,"title":"⭐ 封装浅拷贝函数","slug":"封装浅拷贝函数","link":"#封装浅拷贝函数","children":[]},{"level":3,"title":"⭐ 封装深拷贝函数","slug":"封装深拷贝函数","link":"#封装深拷贝函数","children":[]}]}],"git":{"createdTime":1676128875000,"updatedTime":1676183177000,"contributors":[{"name":"EricKiku","email":"2966678301@qq.com","commits":2}]},"readingTime":{"minutes":13.13,"words":3940},"filePathRelative":"zh/posts/工具库.md","localizedDate":"2023年2月11日","excerpt":"<h1> \\"\\"</h1>\\n<h1> 1. 函数相关</h1>\\n<h2> 1.1 call函数封装</h2>\\n<h3> ⭐ JavaScript 函数 Call</h3>\\n<p>方法重用</p>\\n<p>使用 <code>call()</code> 方法，可以编写能够在不同对象上使用的方法。</p>\\n<p>通过 <code>call()</code>，能够使用属于另一个对象的方法，并改变<code>this</code>的指向</p>\\n<p>第一个参数是指向的对象，后面可以带实参</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> person <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function-variable function\\">fullName</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>firstName <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\" \\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>lastName<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">var</span> person1 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">firstName</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">\\"Bill\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">lastName</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Gates\\"</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">var</span> person2 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">firstName</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">\\"Steve\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">lastName</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Jobs\\"</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span>\\nperson<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fullName</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>person1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 将返回 \\"Bill Gates\\"</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{l as data};
