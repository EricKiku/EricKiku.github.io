import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a2 as e,G as i}from"./framework-61af4b36.js";const l={},u=n("h1",{id:"",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#","aria-hidden":"true"},"#"),s(' ""')],-1),r=n("h1",{id:"面试题网站",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面试题网站","aria-hidden":"true"},"#"),s(" 面试题网站")],-1),d={href:"https://vue3js.cn/interview/",target:"_blank",rel:"noopener noreferrer"},k={href:"http://xue.cnkdl.cn:8360/static/interview/",target:"_blank",rel:"noopener noreferrer"},v=e(`<h1 id="面试题1" tabindex="-1"><a class="header-anchor" href="#面试题1" aria-hidden="true">#</a> 面试题1</h1><h2 id="渲染10w条数据" tabindex="-1"><a class="header-anchor" href="#渲染10w条数据" aria-hidden="true">#</a> 渲染10w条数据</h2><p>如何一次渲染10w条数据</p><h3 id="分页" tabindex="-1"><a class="header-anchor" href="#分页" aria-hidden="true">#</a> <code>分页</code></h3><p>采用：分页+setTimeout</p><p>原因：分页可以把本需要一次渲染10w条数据的工作，分成多个任务，不会出现卡死的状况</p><blockquote><p>优化：setTimeout可以替换成<code>requestAnimationFrame</code>。解释：</p><p><strong><code>window.requestAnimationFrame()</code></strong> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p><p>优点：requestAnimation的好处是，采用系统时间间隔(大多数浏览器刷新频率是60Hz, 相当于16.7ms刷新一次)， 保持最佳的绘制效率, 不会因为间隔时间过短，造成多度绘制，增加开销。也不会因为时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制。 并且rAF会把每一帧中所有的DOM操作集中起来，再一次重绘或者回流中就完成。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 分页</span>
<span class="token keyword">const</span> <span class="token function-variable function">renderList</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 请求获取数据，getList方法会返回10w条数据</span>
    <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取总长度</span>
    <span class="token keyword">const</span> total <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// 定义页数</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 定义一页多少数据</span>
    <span class="token keyword">const</span> limit <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>

    <span class="token comment">// 定义一共多少页</span>
    <span class="token keyword">const</span> totalPages <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>total <span class="token operator">/</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取父元素</span>
    <span class="token keyword">let</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> page <span class="token operator">*</span> limit<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> page <span class="token operator">*</span> limit <span class="token operator">+</span> limit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> item <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// 向父元素中添加创建的子元素 </span>
                <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;img src=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; /&gt;&lt;span&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
                container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">render</span><span class="token punctuation">(</span>page <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对分页优化" tabindex="-1"><a class="header-anchor" href="#对分页优化" aria-hidden="true">#</a> 对分页优化</h3><p>使用<code>document.createDocumentFragment()</code>文档碎片来进一步优化渲染效率</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建文档碎片</span>
        <span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> page <span class="token operator">*</span> limit<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> page <span class="token operator">*</span> limit <span class="token operator">+</span> limit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> item <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 向父元素中添加创建的子元素 </span>
            <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;img src=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; /&gt;&lt;span&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
            <span class="token comment">// 先塞进文档碎片</span>
            fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 再全部塞进父元素</span>
        container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">render</span><span class="token punctuation">(</span>page <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),m=n("p",null,"使用文档碎片的好处：",-1),b=n("p",null,[n("code",null,"DocumentFragments"),s(" 是 DOM 节点。它们不是主 DOM 树的一部分。通常的用例是创建文档片段，将元素附加到文档片段，然后将文档片段附加到 DOM 树。在 DOM 树中，文档片段被其所有的子元素所代替。")],-1),h=n("strong",null,"内存中",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Reflow",target:"_blank",rel:"noopener noreferrer"},f=e(`<h2 id="原型链与继承" tabindex="-1"><a class="header-anchor" href="#原型链与继承" aria-hidden="true">#</a> 原型链与继承</h2><p>对象是没有原型的，原型是<code>方法</code>(函数)所特有的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>	<span class="token comment">//是错的</span>
obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>	<span class="token comment">//正确的</span>

<span class="token keyword">function</span> <span class="token function">Abc</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token class-name">Abc</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>	<span class="token comment">//正确的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承就是实例对象可以使用构造方法中的方法</p><p>从null开始：</p><p>null-&gt;object-&gt;{}-&gt;Array-&gt;[]</p><h2 id="async和await" tabindex="-1"><a class="header-anchor" href="#async和await" aria-hidden="true">#</a> async和await</h2><p>作用： 让异步代码看起来像同步代码。方便控制顺序</p><p>案例：线程休眠</p><blockquote><p>以下例子如果没有加async和await，则会直接输出1和2，然后过2秒代码结束。</p><p>但是如果加了async和await，则必须等待Promise代码块执行完成之后再往下走</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">seconds</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>async和await可以替换掉Promise吗？</p><p>答案是不可以。使用async只能串行执行代码，就是一行一行执行。</p><p>但是Promise.all()可以同时执行多个Promise代码块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="传值和传址" tabindex="-1"><a class="header-anchor" href="#传值和传址" aria-hidden="true">#</a> 传值和传址</h2><p>基础数据类型是传值：number、string、boolean、null、undefined</p><p>引用类型赋值是传址</p><p>面试题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>
    user <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;王五&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//输出name:&#39;丽斯&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为函数中的形参user是指向user对象的地址，不是同一个对象。第二个给user赋值不会影响外层user。</p><h2 id="判断数据类型" tabindex="-1"><a class="header-anchor" href="#判断数据类型" aria-hidden="true">#</a> 判断数据类型</h2><p>第一种：<code>typeof</code> 最好用来判断基本数据类型，判断引用数据类型会有问题。</p><p>第二种：<code>数据 instanceof 构造函数</code> 可以用来判断数组和对象。缺点是，如果改变了构造函数或者实例对象的原型或原型链，那么就会失效，因为该方法是通过原型链来判断的。</p><p>第三种：<code>Object.prototype.toString.call()</code> 最准确的判断方法</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">test</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//[object Number]</span>
<span class="token comment">//[object String]</span>
<span class="token comment">//[object Boolean]</span>
<span class="token comment">//[object Array]</span>
<span class="token comment">//[object Object]</span>
<span class="token comment">//[object Null]</span>
<span class="token comment">//[object Undefined]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组常用方法" tabindex="-1"><a class="header-anchor" href="#数组常用方法" aria-hidden="true">#</a> 数组常用方法</h2>`,28),_={id:"join",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#join","aria-hidden":"true"},"#",-1),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join",target:"_blank",rel:"noopener noreferrer"},j=e(`<p>join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。</p><p>例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Fire&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Air&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Water&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: &quot;Fire,Air,Water&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: &quot;FireAirWater&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: &quot;Fire-Air-Water&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),w={id:"split",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#split","aria-hidden":"true"},"#",-1),O={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split",target:"_blank",rel:"noopener noreferrer"},A=e(`<p>split() 方法使用指定的分隔符字符串将一个String对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。</p><p>例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;The quick brown fox&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> words <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: &quot;fox&quot;</span>

<span class="token keyword">const</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: &quot;k&quot;</span>

<span class="token keyword">const</span> strCopy <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: Array [&quot;The quick brown fox&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),z={id:"push",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#push","aria-hidden":"true"},"#",-1),M={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push",target:"_blank",rel:"noopener noreferrer"},D=n("p",null,"push() 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。",-1),C={id:"pop",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#pop","aria-hidden":"true"},"#",-1),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",target:"_blank",rel:"noopener noreferrer"},W=n("p",null,"pop() 方法从数组中删除最后一个元素，并返回该元素的值。此方法会更改数组的长度。",-1),J={id:"unshift",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#unshift","aria-hidden":"true"},"#",-1),R={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,"unshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。",-1),F={id:"shift",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#shift","aria-hidden":"true"},"#",-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。",-1),P={id:"reverse",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#reverse","aria-hidden":"true"},"#",-1),$={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse",target:"_blank",rel:"noopener noreferrer"},H=n("p",null,"reverse() 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法会改变原数组。",-1),U={id:"sort",tabindex:"-1"},X=n("a",{class:"header-anchor",href:"#sort","aria-hidden":"true"},"#",-1),Y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",target:"_blank",rel:"noopener noreferrer"},Z=e(`<p>sort() 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的。</p><p>问题是：如果不指定函数，那么就是按照诸个字符的 Unicode 位点进行排序。如果想要升序排序时，80会在9的前面，因为按照字符编码来看，8是比9小的。使用函数可以解决这一问题。</p><p>例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 无函数</span>
<span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 箭头函数</span>
<span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* … */</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数返回的值是&lt;0的就是升序，&gt;0就是降序排序。</p><table><thead><tr><th style="text-align:left;"><code>compareFn(a, b)</code> 返回值</th><th style="text-align:left;">排序顺序</th></tr></thead><tbody><tr><td style="text-align:left;">&gt; 0</td><td style="text-align:left;"><code>a</code> 在 <code>b</code> 后</td></tr><tr><td style="text-align:left;">&lt; 0</td><td style="text-align:left;"><code>a</code> 在 <code>b</code> 前</td></tr><tr><td style="text-align:left;">=== 0</td><td style="text-align:left;">保持 <code>a</code> 和 <code>b</code> 的顺序</td></tr></tbody></table><p>以下就是升序排列</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),K={id:"concat",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#concat","aria-hidden":"true"},"#",-1),nn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",target:"_blank",rel:"noopener noreferrer"},sn=e(`<p>concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><p>例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> array3 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),an={id:"splice",tabindex:"-1"},tn=n("a",{class:"header-anchor",href:"#splice","aria-hidden":"true"},"#",-1),en={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",target:"_blank",rel:"noopener noreferrer"},pn=e(`<p>splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回被修改的内容。此方法会改变原数组。</p><p>例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Jan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;March&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;April&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;June&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
months<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;Feb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//[&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span>

months<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;May&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//[&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),on={id:"slice",tabindex:"-1"},cn=n("a",{class:"header-anchor",href:"#slice","aria-hidden":"true"},"#",-1),ln={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",target:"_blank",rel:"noopener noreferrer"},un=e(`<p>slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。</p><p>例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;ant&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bison&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;camel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duck&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;elephant&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: Array [&quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组的常用方法2" tabindex="-1"><a class="header-anchor" href="#数组的常用方法2" aria-hidden="true">#</a> 数组的常用方法2</h2>`,4),rn={id:"foreach",tabindex:"-1"},dn=n("a",{class:"header-anchor",href:"#foreach","aria-hidden":"true"},"#",-1),kn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",target:"_blank",rel:"noopener noreferrer"},vn=e(`<p>forEach() 方法对数组的每个元素执行一次给定的函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

array1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Expected output: &quot;a&quot;</span>
<span class="token comment">// Expected output: &quot;b&quot;</span>
<span class="token comment">// Expected output: &quot;c&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),mn={id:"map",tabindex:"-1"},bn=n("a",{class:"header-anchor",href:"#map","aria-hidden":"true"},"#",-1),hn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"},gn=e(`<p>map() 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Pass a function to map</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: Array [2, 8, 18, 32]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),fn={id:"filter",tabindex:"-1"},_n=n("a",{class:"header-anchor",href:"#filter","aria-hidden":"true"},"#",-1),yn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",target:"_blank",rel:"noopener noreferrer"},xn=e(`<p>filter() 方法创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;spray&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;limit&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;elite&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;exuberant&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;destruction&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;present&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),jn={id:"find",tabindex:"-1"},wn=n("a",{class:"header-anchor",href:"#find","aria-hidden":"true"},"#",-1),qn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find",target:"_blank",rel:"noopener noreferrer"},On=e(`<p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> found <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=&gt;</span> element <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: 12</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),An={id:"findindex",tabindex:"-1"},zn=n("a",{class:"header-anchor",href:"#findindex","aria-hidden":"true"},"#",-1),En={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",target:"_blank",rel:"noopener noreferrer"},Mn=e(`<p>findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回 -1。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">isLargeNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> element <span class="token operator">&gt;</span> <span class="token number">13</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isLargeNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Dn={id:"some",tabindex:"-1"},Cn=n("a",{class:"header-anchor",href:"#some","aria-hidden":"true"},"#",-1),Nn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some",target:"_blank",rel:"noopener noreferrer"},Sn=e(`<p>some() 方法测试数组中是不是至少有 1 个元素通过了被提供的函数测试。它返回的是一个 Boolean 类型的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Checks whether an element is even</span>
<span class="token keyword">const</span> <span class="token function-variable function">even</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> element <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Wn={id:"every",tabindex:"-1"},Jn=n("a",{class:"header-anchor",href:"#every","aria-hidden":"true"},"#",-1),Gn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every",target:"_blank",rel:"noopener noreferrer"},Rn=e(`<p>every() 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isBelowThreshold</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentValue <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isBelowThreshold<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Bn={id:"reduce",tabindex:"-1"},Fn=n("a",{class:"header-anchor",href:"#reduce","aria-hidden":"true"},"#",-1),Vn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",target:"_blank",rel:"noopener noreferrer"},Tn=e(`<p>reduce() 方法对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 0 + 1 + 2 + 3 + 4</span>
<span class="token keyword">const</span> initialValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sumWithInitial <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">,</span>
  initialValue
<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sumWithInitial<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象的浅拷贝与深拷贝" tabindex="-1"><a class="header-anchor" href="#对象的浅拷贝与深拷贝" aria-hidden="true">#</a> 对象的浅拷贝与深拷贝</h2>`,3),In={href:"https://erickiku.github.io/zh/posts/%E5%B7%A5%E5%85%B7%E5%BA%93.html#_3-4-%E5%AF%B9%E8%B1%A1-%E6%95%B0%E7%BB%84%E6%8B%B7%E8%B4%9D",target:"_blank",rel:"noopener noreferrer"},Pn=e(`<h1 id="vue高频面试题" tabindex="-1"><a class="header-anchor" href="#vue高频面试题" aria-hidden="true">#</a> Vue高频面试题</h1><h2 id="虚拟dom" tabindex="-1"><a class="header-anchor" href="#虚拟dom" aria-hidden="true">#</a> 虚拟dom</h2><h3 id="虚拟dom是什么" tabindex="-1"><a class="header-anchor" href="#虚拟dom是什么" aria-hidden="true">#</a> 虚拟dom是什么？</h3><p>虚拟dom的本质就是js对象。</p><p>虚拟dom的三要素：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//目标元素。不可或缺</span>
    <span class="token literal-property property">target</span><span class="token operator">:</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">//元素上的属性</span>
    <span class="token literal-property property">attr</span><span class="token operator">:</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">//子元素</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><p>创建虚拟<code>DOM</code>就是为了更好将虚拟的节点渲染到页面视图中，所以虚拟<code>DOM</code>对象的节点与真实<code>DOM</code>的属性一一照应</p><h3 id="为什么需要虚拟dom" tabindex="-1"><a class="header-anchor" href="#为什么需要虚拟dom" aria-hidden="true">#</a> 为什么需要虚拟DOM？</h3><p>因为DOM是很慢的，元素非常庞大，页面的性能问题，大部分都是由DOM操作引起的。</p><h3 id="怎么提升vue的渲染效率" tabindex="-1"><a class="header-anchor" href="#怎么提升vue的渲染效率" aria-hidden="true">#</a> 怎么提升Vue的渲染效率？</h3><p>通过VNode，在同时更新10个DOM节点时，虚拟DOM不会立即操作DOM，而是将这10个更新后的节点保存到本地的js对象中，最终将通过Diff算法，将虚拟DOM渲染到真实的DOM树上，避免大量无谓的计算。</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，<code>但在一些性能要求极高的应用</code>中虚拟 DOM 无法进行针对性的极致优化。 首次渲染大量DOM时，由于多了一层虚拟DOM的计算，会比innerHTML插入慢。</li></ul><blockquote><p>很多人认为虚拟 DOM 最大的优势是 diff 算法，减少 JavaScript 操作真实 DOM 的带来的性能消耗。虽然这一个虚拟 DOM 带来的一个优势，但并不是全部。虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了<code>跨平台的能力</code>，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是近期很火热的小程序，也可以是各种GUI</p></blockquote><h2 id="vue的data" tabindex="-1"><a class="header-anchor" href="#vue的data" aria-hidden="true">#</a> Vue的data()</h2><h3 id="vue的data-为什么是一个函数" tabindex="-1"><a class="header-anchor" href="#vue的data-为什么是一个函数" aria-hidden="true">#</a> Vue的data()为什么是一个函数</h3><p>首先这里有<code>闭包</code>。使用了闭包的<code>数据私密性</code></p><p>组件实例对象<code>data</code>必须为函数，目的是为了防止多个组件实例对象之间共用一个<code>data</code>，产生数据污染。采用函数的形式，<code>initData</code>时会将其作为工厂函数都会返回全新<code>data</code>对象</p><p>还使用了闭包的<code>延长变量生命周期</code>性质</p><h2 id="vue父子组件" tabindex="-1"><a class="header-anchor" href="#vue父子组件" aria-hidden="true">#</a> Vue父子组件</h2><p>Vue父子组件生命周期加载的时候的执行顺序？</p><p>创建前后+挂载前后</p><p>父组件挂载之前，子组件必须挂载完毕</p><p>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;</p><p>子beforeCreate-&gt;子Created&gt;子beforeMount&gt;子mounted-&gt;</p><p>父mounted</p><p><code>this.$nextTick()</code>的原理就是监听父子组件生命周期的执行</p>`,28);function Ln($n,Hn){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[n("a",d,[s("面试官系列"),t(a)])]),n("p",null,[n("a",k,[s("叩丁狼"),t(a)])]),v,n("blockquote",null,[m,b,n("p",null,[s("因为文档片段存在于"),h,s("，并不在 DOM 树中，所以将子元素插入到文档片段时不会引起页面"),n("a",g,[s("回流"),t(a)]),s("（对元素位置和几何上的计算）。因此，使用文档片段通常会带来更好的性能。")])]),f,n("h3",_,[y,s(),n("a",x,[s("join()"),t(a)])]),j,n("h3",w,[q,s(),n("a",O,[s("split()"),t(a)])]),A,n("h3",z,[E,s(),n("a",M,[s("push()"),t(a)])]),D,n("h3",C,[N,s(),n("a",S,[s("pop()"),t(a)])]),W,n("h3",J,[G,s(),n("a",R,[s("unshift()"),t(a)])]),B,n("h3",F,[V,s(),n("a",T,[s("shift()"),t(a)])]),I,n("h3",P,[L,s(),n("a",$,[s("reverse()"),t(a)])]),H,n("h3",U,[X,s(),n("a",Y,[s("sort()"),t(a)])]),Z,n("h3",K,[Q,s(),n("a",nn,[s("concat()"),t(a)])]),sn,n("h3",an,[tn,s(),n("a",en,[s("splice()"),t(a)])]),pn,n("h3",on,[cn,s(),n("a",ln,[s("slice()"),t(a)])]),un,n("h3",rn,[dn,s(),n("a",kn,[s("forEach()"),t(a)])]),vn,n("h3",mn,[bn,s(),n("a",hn,[s("map()"),t(a)])]),gn,n("h3",fn,[_n,s(),n("a",yn,[s("filter()"),t(a)])]),xn,n("h3",jn,[wn,s(),n("a",qn,[s("find()"),t(a)])]),On,n("h3",An,[zn,s(),n("a",En,[s("findIndex()"),t(a)])]),Mn,n("h3",Dn,[Cn,s(),n("a",Nn,[s("some()"),t(a)])]),Sn,n("h3",Wn,[Jn,s(),n("a",Gn,[s("every()"),t(a)])]),Rn,n("h3",Bn,[Fn,s(),n("a",Vn,[s("reduce()"),t(a)])]),Tn,n("p",null,[n("a",In,[s("对象与数组的拷贝"),t(a)])]),Pn])}const Xn=p(l,[["render",Ln],["__file","前端八股文(面试题).html.vue"]]);export{Xn as default};
