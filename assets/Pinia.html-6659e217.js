import{_ as o,W as i,X as p,Y as n,Z as s,$ as e,a2 as t,G as c}from"./framework-61af4b36.js";const r={},l=n("h1",{id:"",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#","aria-hidden":"true"},"#"),s(' ""')],-1),d=n("h1",{id:"中文文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#中文文档","aria-hidden":"true"},"#"),s(" 中文文档")],-1),u={href:"https://pinia.web3doc.top/",target:"_blank",rel:"noopener noreferrer"},v=t('<h1 id="为什么要使用-pina" tabindex="-1"><a class="header-anchor" href="#为什么要使用-pina" aria-hidden="true">#</a> 为什么要使用 Pina？</h1><p>Pinia 是 Vue 的存储库，它允许您跨组件/页面共享状态。 如果您熟悉 Composition API，您可能会认为您已经可以通过一个简单的 <code>export const state = reactive({})</code>. 这对于单页应用程序来说是正确的，但如果它是服务器端呈现的，<strong>会使您的应用程序暴露于安全漏洞</strong>。 但即使在小型单页应用程序中，您也可以从使用 Pinia 中获得很多好处：</p><ul><li>dev-tools 支持 <ul><li>跟踪动作、突变的时间线</li><li>Store 出现在使用它们的组件中</li><li>time travel 和 更容易的调试</li></ul></li><li>热模块更换 <ul><li>在不重新加载页面的情况下修改您的 Store</li><li>在开发时保持任何现有状态</li></ul></li><li>插件：使用插件扩展 Pinia 功能</li><li>为 JS 用户提供适当的 TypeScript 支持或 <strong>autocompletion</strong></li><li>服务器端渲染支持</li></ul><h1 id="开始" tabindex="-1"><a class="header-anchor" href="#开始" aria-hidden="true">#</a> 开始</h1>',4),k={id:"安装",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#",-1),b={href:"https://pinia.web3doc.top/getting-started.html#%E5%AE%89%E8%A3%85",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>用你最喜欢的包管理器安装 <code>pinia</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add pinia
# 或者使用 npm
npm install pinia
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示</p>`,3),g=n("code",null,"@vue/composition-api",-1),_={href:"https://pinia.web3doc.top/ssr/nuxt.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/wobsoriano/vue-cli-plugin-pinia",target:"_blank",rel:"noopener noreferrer"},x=n("strong",null,"非官方插件",-1),y=t(`<p>创建一个 pinia（根存储）并将其传递给应用程序：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import { createPinia } from &#39;pinia&#39;

app.use(createPinia())
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是-store" tabindex="-1"><a class="header-anchor" href="#什么是-store" aria-hidden="true">#</a> 什么是 Store ？</h2>`,3),S=n("strong",null,"它托管全局状态",-1),w=n("strong",null,"三个概念",-1),P={href:"https://pinia.web3doc.top/core-concepts/state.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://pinia.web3doc.top/core-concepts/getters.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://pinia.web3doc.top/core-concepts/actions.html",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"我什么时候应该使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#我什么时候应该使用","aria-hidden":"true"},"#"),s(" 我什么时候应该使用")],-1),V=n("p",null,"存储应该包含可以在整个应用程序中访问的数据。这包括在许多地方使用的数据，例如导航栏中显示的用户信息，以及需要通过页面保留的数据，例如一个非常复杂的多步骤表格。",-1),$=n("p",null,"另一方面，您应该避免在存储中包含可以托管在组件中的本地数据，例如页面本地元素的可见性。",-1),j=n("p",null,"并非所有应用程序都需要访问全局状态，但如果您需要一个，Pania 将使您的生活更轻松。",-1),B={id:"定义一个-store",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#定义一个-store","aria-hidden":"true"},"#",-1),T={href:"https://pinia.web3doc.top/core-concepts/#%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA-store",target:"_blank",rel:"noopener noreferrer"},q={href:"https://vueschool.io/lessons/define-your-first-pinia-store?friend=vuerouter",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>在深入了解核心概念之前，我们需要知道 Store 是使用 <code>defineStore()</code> 定义的，并且它需要一个<strong>唯一</strong>名称，作为第一个参数传递：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token comment">// useStore 可以是 useUser、useCart 之类的任何东西</span>
<span class="token comment">// 第一个参数是应用程序中 store 的唯一 id</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// other options...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <em>name</em>，也称为 <em>id</em>，是必要的，Pinia 使用它来将 store 连接到 devtools。 将返回的函数命名为 <em>use...</em> 是跨可组合项的约定，以使其符合你的使用习惯。</p>`,3),R={id:"使用-store",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#使用-store","aria-hidden":"true"},"#",-1),W={href:"https://pinia.web3doc.top/core-concepts/#%E4%BD%BF%E7%94%A8-store",target:"_blank",rel:"noopener noreferrer"},D=t(`<p>我们正在 <em>定义</em> 一个 store，因为在 <code>setup()</code> 中调用 <code>useStore()</code> 之前不会创建 store：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/counter&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// 您可以返回整个 store 实例以在模板中使用它</span>
      store<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以根据需要定义任意数量的 store ，并且**您应该在不同的文件中定义每个 store **以充分利用 pinia（例如自动允许您的包进行代码拆分和 TypeScript 推理）。</p>`,3),F=n("code",null,"setup",-1),G={href:"https://pinia.web3doc.top/cookbook/options-api.html",target:"_blank",rel:"noopener noreferrer"},J=n("em",null,"map helpers",-1),U=t(`<p>一旦 store 被实例化，你就可以直接在 store 上访问 <code>state</code>、<code>getters</code> 和 <code>actions</code> 中定义的任何属性。 我们将在接下来的页面中详细介绍这些内容，但自动补全会对您有所帮助。</p><p>请注意，<code>store</code> 是一个用<code>reactive</code> 包裹的对象，这意味着不需要在getter 之后写<code>.value</code>，但是，就像<code>setup</code> 中的<code>props</code> 一样，<strong>我们不能对其进行解构</strong>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export default defineComponent({
  setup() {
    const store = useStore()
    // ❌ 这不起作用，因为它会破坏响应式
    // 这和从 props 解构是一样的
    const { name, doubleCount } = store

    name // &quot;eduardo&quot;
    doubleCount // 2

    return {
      // 一直会是 &quot;eduardo&quot;
      name,
      // 一直会是 2
      doubleCount,
      // 这将是响应式的
      doubleValue: computed(() =&gt; store.doubleCount),
      }
  },
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了从 Store 中提取属性同时保持其响应式，您需要使用<code>storeToRefs()</code>。 它将为任何响应式属性创建 refs。 当您仅使用 store 中的状态但不调用任何操作时，这很有用：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import { storeToRefs } from &#39;pinia&#39;

export default defineComponent({
  setup() {
    const store = useStore()
    // \`name\` 和 \`doubleCount\` 是响应式引用
    // 这也会为插件添加的属性创建引用
    // 但跳过任何 action 或 非响应式（不是 ref/reactive）的属性
    const { name, doubleCount } = storeToRefs(store)

    return {
      name,
      doubleCount
    }
  },
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解构store" tabindex="-1"><a class="header-anchor" href="#解构store" aria-hidden="true">#</a> 解构store</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/index&#39;</span>

<span class="token keyword">const</span> Store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//这个方式结构出来的三个变量不是响应式的，修改不会影响state</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>current<span class="token punctuation">,</span>msg<span class="token punctuation">,</span>name<span class="token punctuation">}</span> <span class="token operator">=</span> Store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应式解构方法：使用新的API</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/index&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>storeToRefs<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">const</span> Store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//这个方式解构出来的是响应式</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>current<span class="token punctuation">,</span>msg<span class="token punctuation">,</span>name<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>Store<span class="token punctuation">)</span>
<span class="token comment">//修改值需要使用.value	</span>
<span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  current<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  msg<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">&#39;no&#39;</span><span class="token punctuation">;</span>
  name<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">&#39;eric&#39;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>msg<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h1>`,10),X={href:"https://vueschool.io/lessons/access-state-from-a-pinia-store?friend=vuerouter",target:"_blank",rel:"noopener noreferrer"},Y=t(`<p>大多数时候，state 是 store 的核心部分。 我们通常从定义应用程序的状态开始。 在 Pinia 中，状态被定义为返回初始状态的函数。 Pinia 在服务器端和客户端都可以工作。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;storeId&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 推荐使用 完整类型推断的箭头函数</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// 所有这些属性都将自动推断其类型</span>
      counter<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">&#39;Eduardo&#39;</span><span class="token punctuation">,</span>
      isAdmin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示</p>`,3),Z=n("code",null,"state",-1),z=n("code",null,"data",-1),H=n("code",null,"Vue.set()",-1),K=n("strong",null,"为其添加新的",-1),M={href:"https://vuejs.org/v2/api/#data",target:"_blank",rel:"noopener noreferrer"},O=t(`<h2 id="访问-state" tabindex="-1"><a class="header-anchor" href="#访问-state" aria-hidden="true">#</a> 访问 “state”</h2><p>默认情况下，您可以通过 <code>store</code> 实例访问状态来直接读取和写入状态：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

store<span class="token punctuation">.</span>counter<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改state" tabindex="-1"><a class="header-anchor" href="#修改state" aria-hidden="true">#</a> 修改state</h2><p>修改有四种方法</p><p>1.直接修改，不推荐</p><p>2.使用$patch方法，参数是对象，对象中的属性是state的属性</p><p>3.使用$patch方法，参数是箭头函数，参数是state，可以修改state中的值</p><p>4.使用action,在action中定义方法，然后调用，注意在action中的方法不能是箭头函数，this会出错</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/index&#39;</span>

<span class="token keyword">const</span> Store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//1. Store.current++;</span>
  <span class="token comment">//2. Store.$patch({current:5})</span>
  <span class="token comment">//3. Store.$patch((state)=&gt;{</span>
  <span class="token comment">//   state.current++</span>
  <span class="token comment">// })</span>
  <span class="token comment">//4. Store.setCurrent(50);</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h1><h3 id="_1-reset" tabindex="-1"><a class="header-anchor" href="#_1-reset" aria-hidden="true">#</a> 1.$reset()</h3><p>重置state到初始值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

store<span class="token punctuation">.</span><span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-subscribe" tabindex="-1"><a class="header-anchor" href="#_2-subscribe" aria-hidden="true">#</a> 2.$subscribe()</h3><p>订阅状态，任何state的变化都会触发这个函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//args:有新值旧值等属性，state就是state</span>
store<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span>state<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-onactions" tabindex="-1"><a class="header-anchor" href="#_3-onactions" aria-hidden="true">#</a> 3.$onActions()</h3><p>订阅Action的状态，action的函数触发会触发这个方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//args是带有一些属性的对象</span>
store<span class="token punctuation">.</span><span class="token function">$onAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h1><p>pinia不是持久化，想要持久化需要插件</p>`,22);function Q(nn,sn){const a=c("ExternalLinkIcon");return i(),p("div",null,[l,d,n("p",null,[n("a",u,[s("https://pinia.web3doc.top/"),e(a)])]),v,n("h2",k,[m,s(" 安装"),n("a",b,[s("#"),e(a)])]),h,n("blockquote",null,[n("p",null,[s("如果您的应用使用 Vue 2，您还需要安装组合 API："),g,s("。 如果您使用 Nuxt，则应遵循 "),n("a",_,[s("这些说明"),e(a)]),s("。")])]),n("p",null,[s("如果你使用的是 Vue CLI，你可以试试这个 "),n("a",f,[x,e(a)]),s("。")]),y,n("p",null,[s("一个 Store （如 Pinia）是一个实体，它持有未绑定到您的组件树的状态和业务逻辑。换句话说，"),S,s("。它有点像一个始终存在并且每个人都可以读取和写入的组件。它有"),w,s("，"),n("a",P,[s("state"),e(a)]),s("、"),n("a",A,[s("getters"),e(a)]),s(" 和 "),n("a",C,[s("actions"),e(a)]),s(" 并且可以安全地假设这些概念等同于组件中的“数据”、“计算”和“方法”。")]),E,V,$,j,n("h1",B,[I,s(" 定义一个 Store"),n("a",T,[s("#"),e(a)])]),n("p",null,[n("a",q,[s("Watch a free video lesson on Vue School"),e(a)])]),N,n("h2",R,[L,s(" 使用 store"),n("a",W,[s("#"),e(a)])]),D,n("p",null,[s("如果您还没有使用 "),F,s(" 组件，"),n("a",G,[s("您仍然可以将 Pinia 与 "),J,s(" 一起使用"),e(a)]),s("。")]),U,n("p",null,[n("a",X,[s("Watch a free video lesson on Vue School"),e(a)])]),Y,n("blockquote",null,[n("p",null,[s("如果您使用的是 Vue 2，您在 "),Z,s(" 中创建的数据遵循与 Vue 实例中的 "),z,s(" 相同的规则，即 state 对象必须是普通的，并且您需要在以下情况下调用 "),H,s(),K,s("属性。 "),n("strong",null,[s("另请参阅："),n("a",M,[s("Vue#data"),e(a)])]),s("。")])]),O])}const en=o(r,[["render",Q],["__file","Pinia.html.vue"]]);export{en as default};
